ggplot(data=redo.corr.df, aes(x=Var1, y=Var2)) +#
    geom_tile(aes(fill = r), colour = "white") +#
    geom_point(data=subset(redo.corr.df,!is.na(bh95.qsig)), aes(x=Var1, y=Var2),#
        colour = "grey30", size=1.5) +#
    scale_fill_gradientn(name="Spearman's rho", #
        limits = c(-1,1),#
        breaks=c(-1,-0.7,-0.5,0,0.5,0.7,1),#
        colours = rev(brewer.pal(11, name="RdYlBu")),#
        na.value = "white",#
        guide = guide_colorbar(barwidth = 1, barheight = 10, nbin = 50, #
            draw.ulim = FALSE, draw.llim = FALSE, title.hjust = 0, title.vjust = 0,#
            title.theme = element_text(size=8, colour = "grey20", angle = -90))) +#
    scale_x_discrete("", expand = c(0, 0)) + #
    scale_y_discrete("", expand = c(0, 0)) +#
    theme(panel.grid.major = element_blank(),#
        panel.background = element_rect(fill = "white", colour = NA), #
        axis.ticks = element_blank(),#
        axis.text.y = element_text(size = 8, colour = "grey30"),#
        axis.text.x = element_text(size = 8, colour = "grey30",#
            angle = 90, hjust = 0, vjust = 0.5),#
        # plot.margin = unit(c(0.1,0.2,-3.8,0), "cm"),#
        # legend.position = c(0.4, 0.75),#
        legend.position = "right",#
        legend.title = element_text(size = 12))
ggplot(data=redo.corr.df, aes(x=Var1, y=Var2)) +#
    geom_tile(aes(fill = r), colour = "white") +#
    geom_point(data=subset(redo.corr.df,!is.na(bh95.qsig)), aes(x=Var1, y=Var2),#
        colour = "grey30", size=1.5) +#
    scale_fill_gradientn(name="Spearman's rho", #
        limits = c(-1,1),#
        breaks=c(-1,-0.7,-0.5,0,0.5,0.7,1),#
        colours = rev(brewer.pal(11, name="RdYlBu")),#
        na.value = "white",#
        guide = guide_colorbar(barwidth = 1, barheight = 10, nbin = 50, #
            draw.ulim = FALSE, draw.llim = FALSE, title.hjust = 0.5, title.vjust = 0.5,#
            title.theme = element_text(size=8, colour = "grey20", angle = 45))) +#
    scale_x_discrete("", expand = c(0, 0)) + #
    scale_y_discrete("", expand = c(0, 0)) +#
    theme(panel.grid.major = element_blank(),#
        panel.background = element_rect(fill = "white", colour = NA), #
        axis.ticks = element_blank(),#
        axis.text.y = element_text(size = 8, colour = "grey30"),#
        axis.text.x = element_text(size = 8, colour = "grey30",#
            angle = 90, hjust = 0, vjust = 0.5),#
        # plot.margin = unit(c(0.1,0.2,-3.8,0), "cm"),#
        # legend.position = c(0.4, 0.75),#
        legend.position = "right",#
        legend.title = element_text(size = 12))
p = ggplot(data=redo.corr.df, aes(x=Var1, y=Var2)) +#
    geom_tile(aes(fill = r), colour = "white") +#
    geom_point(data=subset(redo.corr.df,!is.na(bh95.qsig)), aes(x=Var1, y=Var2),#
        colour = "grey30", size=1.5) +#
    scale_fill_gradientn(name="Spearman's rho", #
        limits = c(-1,1),#
        breaks=c(-1,-0.7,-0.5,0,0.5,0.7,1),#
        colours = rev(brewer.pal(11, name="RdYlBu")),#
        na.value = "white",#
        guide = guide_colorbar(barwidth = 1, barheight = 10, nbin = 50, #
            draw.ulim = FALSE, draw.llim = FALSE, title.hjust = 0.5, title.vjust = 0.5,#
            title.theme = element_text(size=8, colour = "grey20", angle = 45))) +#
    scale_x_discrete("", expand = c(0, 0)) + #
    scale_y_discrete("", expand = c(0, 0)) +#
    theme(panel.grid.major = element_blank(),#
        panel.background = element_rect(fill = "white", colour = NA), #
        axis.ticks = element_blank(),#
        axis.text.y = element_text(size = 8, colour = "grey30"),#
        axis.text.x = element_text(size = 8, colour = "grey30",#
            angle = 90, hjust = 0, vjust = 0.5),#
        # plot.margin = unit(c(0.1,0.2,-3.8,0), "cm"),#
        # legend.position = c(0.4, 0.75),#
        legend.position = "right",#
        legend.title = element_text(size = 12))
g = ggplot_gtable(ggplot_build(p))#
# find bottom axis#
xax = which(g$layout$name == "axis-b")#
#
g <- gtable_add_rows(g, g$heights[g$layout[xax, ]$b], 0)#
ax <- g$grobs[[xax]]$children[[2]]#
ax$heights <- rev(ax$heights)#
ax$grobs <- rev(ax$grobs)#
pp <- c(subset(g$layout, name == "panel", select = t:r))#
g <- gtable_add_grob(g, ax, t=1, l=pp$l)#
g$grobs[[xax]]$children[[2]] <- NULL#
#
grid.draw(g)
library(gtable)
g = ggplot_gtable(ggplot_build(p))#
# find bottom axis#
xax = which(g$layout$name == "axis-b")#
#
g <- gtable_add_rows(g, g$heights[g$layout[xax, ]$b], 0)#
ax <- g$grobs[[xax]]$children[[2]]#
ax$heights <- rev(ax$heights)#
ax$grobs <- rev(ax$grobs)#
pp <- c(subset(g$layout, name == "panel", select = t:r))#
g <- gtable_add_grob(g, ax, t=1, l=pp$l)#
g$grobs[[xax]]$children[[2]] <- NULL#
#
grid.draw(g)
ggplot(data=redo.corr.df, aes(x=Var1, y=Var2)) +#
    geom_tile(aes(fill = r), colour = "white") +#
    geom_point(data=subset(redo.corr.df,!is.na(bh95.qsig)), aes(x=Var1, y=Var2),#
        colour = "grey30", size=1.5) +#
    scale_fill_gradientn(name="Spearman's rho", #
        limits = c(-1,1),#
        breaks=c(-1,-0.7,-0.5,0,0.5,0.7,1),#
        colours = rev(brewer.pal(11, name="RdYlBu")),#
        na.value = "white",#
        guide = guide_colorbar(barwidth = 1, barheight = 10, nbin = 50, #
            draw.ulim = FALSE, draw.llim = FALSE,# title.hjust = 0.5, title.vjust = 0.5,#
            title.theme = element_text(size=8, colour = "grey20", angle = 0))) +#
    scale_x_discrete("", expand = c(0, 0)) + #
    scale_y_discrete("", expand = c(0, 0)) +#
    theme(panel.grid.major = element_blank(),#
        panel.background = element_rect(fill = "white", colour = NA), #
        axis.ticks = element_blank(),#
        axis.text.y = element_text(size = 8, colour = "grey30"),#
        axis.text.x = element_text(size = 8, colour = "grey30",#
            angle = 90, hjust = 0, vjust = 0.5),#
        # plot.margin = unit(c(0.1,0.2,-3.8,0), "cm"),#
        # legend.position = c(0.4, 0.75),#
        legend.position = "bottom",#
        legend.title = element_text(size = 12))
ggplot(data=redo.corr.df, aes(x=Var1, y=Var2)) +#
    geom_tile(aes(fill = r), colour = "white") +#
    geom_point(data=subset(redo.corr.df,!is.na(bh95.qsig)), aes(x=Var1, y=Var2),#
        colour = "grey30", size=1.5) +#
    scale_fill_gradientn(name="Spearman's rho", #
        limits = c(-1,1),#
        breaks=c(-1,-0.7,-0.5,0,0.5,0.7,1),#
        colours = rev(brewer.pal(11, name="RdYlBu")),#
        na.value = "white",#
        guide = guide_colorbar(barwidth = 15, barheight = 1, nbin = 50, #
            draw.ulim = FALSE, draw.llim = FALSE,# title.hjust = 0.5, title.vjust = 0.5,#
            title.theme = element_text(size=8, colour = "grey20", angle = 0))) +#
    scale_x_discrete("", expand = c(0, 0)) + #
    scale_y_discrete("", expand = c(0, 0)) +#
    theme(panel.grid.major = element_blank(),#
        panel.background = element_rect(fill = "white", colour = NA), #
        axis.ticks = element_blank(),#
        axis.text.y = element_text(size = 8, colour = "grey30"),#
        axis.text.x = element_text(size = 8, colour = "grey30",#
            angle = 90, hjust = 0, vjust = 0.5),#
        # plot.margin = unit(c(0.1,0.2,-3.8,0), "cm"),#
        # legend.position = c(0.4, 0.75),#
        legend.position = "bottom",#
        legend.title = element_text(size = 12))
ggplot(data=redo.corr.df, aes(x=Var1, y=Var2)) +#
    geom_tile(aes(fill = r), colour = "white") +#
    geom_point(data=subset(redo.corr.df,!is.na(bh95.qsig)), aes(x=Var1, y=Var2),#
        colour = "grey30", size=1.5) +#
    scale_fill_gradientn(name="Spearman's rho", #
        limits = c(-1,1),#
        breaks=c(-1,-0.7,-0.5,0,0.5,0.7,1),#
        colours = rev(brewer.pal(11, name="RdYlBu")),#
        na.value = "white",#
        guide = guide_colorbar(barwidth = 15, barheight = 1, nbin = 50, #
            draw.ulim = FALSE, draw.llim = FALSE,#
            title.theme = element_text(size=10, colour = "grey20", angle = 0))) +#
    scale_x_discrete("", expand = c(0, 0)) + #
    scale_y_discrete("", expand = c(0, 0)) +#
    theme(panel.grid.major = element_blank(),#
        panel.background = element_rect(fill = "white", colour = NA), #
        axis.ticks = element_blank(),#
        axis.text.y = element_text(size = 8, colour = "grey30"),#
        axis.text.x = element_text(size = 8, colour = "grey30",#
            angle = 90, hjust = 0, vjust = 0.5),#
        legend.position = "bottom",#
        legend.title = element_text(size = 12))
ggplot(data=redo.corr.df, aes(x=Var1, y=Var2)) +#
    geom_tile(aes(fill = r), colour = "white") +#
    geom_point(data=subset(redo.corr.df,!is.na(bh95.qsig)), aes(x=Var1, y=Var2),#
        colour = "grey30", size=1.5) +#
    scale_fill_gradientn(name="Spearman's rho", #
        limits = c(-1,1),#
        breaks=c(-1,-0.7,-0.5,0,0.5,0.7,1),#
        colours = rev(brewer.pal(11, name="RdYlBu")),#
        na.value = "white",#
        guide = guide_colorbar(barwidth = 15, barheight = 1, nbin = 50, #
            draw.ulim = FALSE, draw.llim = FALSE,#
            title.theme = element_text(size=10, colour = "grey20", angle = 0))) +#
    scale_x_discrete("", expand = c(0, 0)) + #
    scale_y_discrete("", expand = c(0, 0)) +#
    theme(panel.grid.major = element_blank(),#
        panel.background = element_rect(fill = "white", colour = NA), #
        axis.ticks = element_blank(),#
        axis.text.y = element_text(size = 8, colour = "grey30"),#
        axis.text.x = element_text(size = 8, colour = "grey30",#
            angle = 65, hjust = 0, vjust = 0.5),#
        legend.position = "bottom",#
        legend.title = element_text(size = 12))
ggplot(data=redo.corr.df, aes(x=Var1, y=Var2)) +#
    geom_tile(aes(fill = r), colour = "white") +#
    geom_point(data=subset(redo.corr.df,!is.na(bh95.qsig)), aes(x=Var1, y=Var2),#
        colour = "grey30", size=1.5) +#
    scale_fill_gradientn(name="Spearman's rho", #
        limits = c(-1,1),#
        breaks=c(-1,-0.7,-0.5,0,0.5,0.7,1),#
        colours = rev(brewer.pal(11, name="RdYlBu")),#
        na.value = "white",#
        guide = guide_colorbar(barwidth = 15, barheight = 1, nbin = 50, #
            draw.ulim = FALSE, draw.llim = FALSE,#
            title.theme = element_text(size=10, colour = "grey20", angle = 0))) +#
    scale_x_discrete("", expand = c(0, 0)) + #
    scale_y_discrete("", expand = c(0, 0)) +#
    theme(panel.grid.major = element_blank(),#
        panel.background = element_rect(fill = "white", colour = NA), #
        axis.ticks = element_blank(),#
        axis.text.y = element_text(size = 8, colour = "grey30"),#
        axis.text.x = element_text(size = 8, colour = "grey30",#
            angle = 65, hjust = 0.5, vjust = 0.5),#
        legend.position = "bottom",#
        legend.title = element_text(size = 12))
ggplot(data=redo.corr.df, aes(x=Var1, y=Var2)) +#
    geom_tile(aes(fill = r), colour = "white") +#
    geom_point(data=subset(redo.corr.df,!is.na(bh95.qsig)), aes(x=Var1, y=Var2),#
        colour = "grey30", size=1.5) +#
    scale_fill_gradientn(name="Spearman's rho", #
        limits = c(-1,1),#
        breaks=c(-1,-0.7,-0.5,0,0.5,0.7,1),#
        colours = rev(brewer.pal(11, name="RdYlBu")),#
        na.value = "white",#
        guide = guide_colorbar(barwidth = 15, barheight = 1, nbin = 50, #
            draw.ulim = FALSE, draw.llim = FALSE,#
            title.theme = element_text(size=10, colour = "grey20", angle = 0))) +#
    scale_x_discrete("", expand = c(0, 0)) + #
    scale_y_discrete("", expand = c(0, 0)) +#
    theme(panel.grid.major = element_blank(),#
        panel.background = element_rect(fill = "white", colour = NA), #
        axis.ticks = element_blank(),#
        axis.text.y = element_text(size = 8, colour = "grey30"),#
        axis.text.x = element_text(size = 8, colour = "grey30",#
            angle = 65, hjust = 0.5, vjust = 0),#
        legend.position = "bottom",#
        legend.title = element_text(size = 12))
ggplot(data=redo.corr.df, aes(x=Var1, y=Var2)) +#
    geom_tile(aes(fill = r), colour = "white") +#
    geom_point(data=subset(redo.corr.df,!is.na(bh95.qsig)), aes(x=Var1, y=Var2),#
        colour = "grey30", size=1.5) +#
    scale_fill_gradientn(name="Spearman's rho", #
        limits = c(-1,1),#
        breaks=c(-1,-0.7,-0.5,0,0.5,0.7,1),#
        colours = rev(brewer.pal(11, name="RdYlBu")),#
        na.value = "white",#
        guide = guide_colorbar(barwidth = 15, barheight = 1, nbin = 50, #
            draw.ulim = FALSE, draw.llim = FALSE,#
            title.theme = element_text(size=10, colour = "grey20", angle = 0))) +#
    scale_x_discrete("", expand = c(0, 0)) + #
    scale_y_discrete("", expand = c(0, 0)) +#
    theme(panel.grid.major = element_blank(),#
        panel.background = element_rect(fill = "white", colour = NA), #
        axis.ticks = element_blank(),#
        axis.text.y = element_text(size = 8, colour = "grey30"),#
        axis.text.x = element_text(size = 8, colour = "grey30",#
            angle = 65, hjust = 0.5, vjust = 0.5),#
        legend.position = "bottom",#
        legend.title = element_text(size = 12))
ggplot(data=redo.corr.df, aes(x=Var1, y=Var2)) +#
    geom_tile(aes(fill = r), colour = "white") +#
    geom_point(data=subset(redo.corr.df,!is.na(bh95.qsig)), aes(x=Var1, y=Var2),#
        colour = "grey30", size=1.5) +#
    scale_fill_gradientn(name="Spearman's rho", #
        limits = c(-1,1),#
        breaks=c(-1,-0.7,-0.5,0,0.5,0.7,1),#
        colours = rev(brewer.pal(11, name="RdYlBu")),#
        na.value = "white",#
        guide = guide_colorbar(barwidth = 15, barheight = 1, nbin = 50, #
            draw.ulim = FALSE, draw.llim = FALSE,#
            title.theme = element_text(size=10, colour = "grey20", angle = 0))) +#
    scale_x_discrete("", expand = c(0, 0)) + #
    scale_y_discrete("", expand = c(0, 0)) +#
    theme(panel.grid.major = element_blank(),#
        panel.background = element_rect(fill = "white", colour = NA), #
        axis.ticks = element_blank(),#
        axis.text.y = element_text(size = 8, colour = "grey30"),#
        axis.text.x = element_text(size = 8, colour = "grey30",#
            angle = 65, hjust = 1, vjust = 0),#
        legend.position = "bottom",#
        legend.title = element_text(size = 12))
ggplot(data=redo.corr.df, aes(x=Var1, y=Var2)) +#
    geom_tile(aes(fill = r), colour = "white") +#
    geom_point(data=subset(redo.corr.df,!is.na(bh95.qsig)), aes(x=Var1, y=Var2),#
        colour = "grey30", size=1.5) +#
    scale_fill_gradientn(name="Spearman's rho", #
        limits = c(-1,1),#
        breaks=c(-1,-0.7,-0.5,0,0.5,0.7,1),#
        colours = rev(brewer.pal(11, name="RdYlBu")),#
        na.value = "white",#
        guide = guide_colorbar(barwidth = 15, barheight = 1, nbin = 50, #
            draw.ulim = FALSE, draw.llim = FALSE,#
            title.theme = element_text(size=10, colour = "grey20", angle = 0))) +#
    scale_x_discrete("", expand = c(0, 0)) + #
    scale_y_discrete("", expand = c(0, 0)) +#
    theme(panel.grid.major = element_blank(),#
        panel.background = element_rect(fill = "white", colour = NA), #
        axis.ticks = element_blank(),#
        axis.text.y = element_text(size = 8, colour = "grey30"),#
        axis.text.x = element_text(size = 8, colour = "grey30",#
            angle = 65, hjust = 0, vjust = 0.25),#
        legend.position = "bottom",#
        legend.title = element_text(size = 12))
ggplot(data=redo.corr.df, aes(x=Var1, y=Var2)) +#
    geom_tile(aes(fill = r), colour = "white") +#
    geom_point(data=subset(redo.corr.df,!is.na(bh95.qsig)), aes(x=Var1, y=Var2),#
        colour = "grey30", size=1.5) +#
    scale_fill_gradientn(name="Spearman's rho", #
        limits = c(-1,1),#
        breaks=c(-1,-0.7,-0.5,0,0.5,0.7,1),#
        colours = rev(brewer.pal(11, name="RdYlBu")),#
        na.value = "white",#
        guide = guide_colorbar(barwidth = 15, barheight = 1, nbin = 50, #
            draw.ulim = FALSE, draw.llim = FALSE,#
            title.theme = element_text(size=10, colour = "grey20", angle = 0))) +#
    scale_x_discrete("", expand = c(0, 0)) + #
    scale_y_discrete("", expand = c(0, 0)) +#
    theme(panel.grid.major = element_blank(),#
        panel.background = element_rect(fill = "white", colour = NA), #
        axis.ticks = element_blank(),#
        axis.text.y = element_text(size = 8, colour = "grey30"),#
        axis.text.x = element_text(size = 8, colour = "grey30",#
            angle = 90, hjust = 0, vjust = 0.5),#
        legend.position = "bottom",#
        legend.title = element_text(size = 12))
ggplot(data=redo.corr.df, aes(x=Var1, y=Var2)) +#
    geom_tile(aes(fill = r), colour = "white") +#
    geom_point(data=subset(redo.corr.df,!is.na(bky06.qsig)), aes(x=Var1, y=Var2),#
        colour = "grey30", size=1.5) +#
    scale_fill_gradientn(name="Spearman's rho", #
        limits = c(-1,1),#
        breaks=c(-1,-0.7,-0.5,0,0.5,0.7,1),#
        colours = rev(brewer.pal(11, name="RdYlBu")),#
        na.value = "white",#
        guide = guide_colorbar(barwidth = 15, barheight = 1, nbin = 50, #
            draw.ulim = FALSE, draw.llim = FALSE,#
            title.theme = element_text(size=10, colour = "grey20", angle = 0))) +#
    scale_x_discrete("", expand = c(0, 0)) + #
    scale_y_discrete("", expand = c(0, 0)) +#
    theme(panel.grid.major = element_blank(),#
        panel.background = element_rect(fill = "white", colour = NA), #
        axis.ticks = element_blank(),#
        axis.text.y = element_text(size = 8, colour = "grey30"),#
        axis.text.x = element_text(size = 8, colour = "grey30",#
            angle = 90, hjust = 0, vjust = 0.5),#
        legend.position = "bottom",#
        legend.title = element_text(size = 12))
redo.corr.df
ggplot(data=redo.corr.df, aes(x=Var1, y=Var2)) +#
    geom_tile(aes(fill = r), colour = "white") +#
    geom_point(data=subset(redo.corr.df,!is.na(bh95.qsig)), aes(x=Var1, y=Var2),#
        colour = "grey30", size=1.5) +#
    geom_point(data=subset(redo.corr.df,!is.na(bky06.qsig)), aes(x=Var1, y=Var2),#
        colour = "grey30", size=1.5, shape=5) +#
    scale_fill_gradientn(name="Spearman's rho", #
        limits = c(-1,1),#
        breaks=c(-1,-0.7,-0.5,0,0.5,0.7,1),#
        colours = rev(brewer.pal(11, name="RdYlBu")),#
        na.value = "white",#
        guide = guide_colorbar(barwidth = 15, barheight = 1, nbin = 50, #
            draw.ulim = FALSE, draw.llim = FALSE,#
            title.theme = element_text(size=10, colour = "grey20", angle = 0))) +#
    scale_x_discrete("", expand = c(0, 0)) + #
    scale_y_discrete("", expand = c(0, 0)) +#
    theme(panel.grid.major = element_blank(),#
        panel.background = element_rect(fill = "white", colour = NA), #
        axis.ticks = element_blank(),#
        axis.text.y = element_text(size = 8, colour = "grey30"),#
        axis.text.x = element_text(size = 8, colour = "grey30",#
            angle = 90, hjust = 0, vjust = 0.5),#
        legend.position = "bottom",#
        legend.title = element_text(size = 12))
ggplot(data=redo.corr.df, aes(x=Var1, y=Var2)) +#
    geom_tile(aes(fill = r), colour = "white") +#
    geom_point(data=subset(redo.corr.df,!is.na(bh95.qsig)), aes(x=Var1, y=Var2),#
        colour = "grey30", size=1.5, shape=1) +#
    geom_point(data=subset(redo.corr.df,!is.na(bky06.qsig)), aes(x=Var1, y=Var2),#
        colour = "grey30", size=1.5, shape=8) +#
    scale_fill_gradientn(name="Spearman's rho", #
        limits = c(-1,1),#
        breaks=c(-1,-0.7,-0.5,0,0.5,0.7,1),#
        colours = rev(brewer.pal(11, name="RdYlBu")),#
        na.value = "white",#
        guide = guide_colorbar(barwidth = 15, barheight = 1, nbin = 50, #
            draw.ulim = FALSE, draw.llim = FALSE,#
            title.theme = element_text(size=10, colour = "grey20", angle = 0))) +#
    scale_x_discrete("", expand = c(0, 0)) + #
    scale_y_discrete("", expand = c(0, 0)) +#
    theme(panel.grid.major = element_blank(),#
        panel.background = element_rect(fill = "white", colour = NA), #
        axis.ticks = element_blank(),#
        axis.text.y = element_text(size = 8, colour = "grey30"),#
        axis.text.x = element_text(size = 8, colour = "grey30",#
            angle = 90, hjust = 0, vjust = 0.5),#
        legend.position = "bottom",#
        legend.title = element_text(size = 12))
ggplot(data=redo.corr.df, aes(x=Var1, y=Var2)) +#
    geom_tile(aes(fill = r), colour = "white") +#
    geom_point(data=subset(redo.corr.df,!is.na(bh95.qsig)), aes(x=Var1, y=Var2),#
        colour = "grey30", size=1.5, shape=21) +#
    geom_point(data=subset(redo.corr.df,!is.na(bky06.qsig)), aes(x=Var1, y=Var2),#
        colour = "grey30", size=1.5, shape=8) +#
    scale_fill_gradientn(name="Spearman's rho", #
        limits = c(-1,1),#
        breaks=c(-1,-0.7,-0.5,0,0.5,0.7,1),#
        colours = rev(brewer.pal(11, name="RdYlBu")),#
        na.value = "white",#
        guide = guide_colorbar(barwidth = 15, barheight = 1, nbin = 50, #
            draw.ulim = FALSE, draw.llim = FALSE,#
            title.theme = element_text(size=10, colour = "grey20", angle = 0))) +#
    scale_x_discrete("", expand = c(0, 0)) + #
    scale_y_discrete("", expand = c(0, 0)) +#
    theme(panel.grid.major = element_blank(),#
        panel.background = element_rect(fill = "white", colour = NA), #
        axis.ticks = element_blank(),#
        axis.text.y = element_text(size = 8, colour = "grey30"),#
        axis.text.x = element_text(size = 8, colour = "grey30",#
            angle = 90, hjust = 0, vjust = 0.5),#
        legend.position = "bottom",#
        legend.title = element_text(size = 12))
ggplot(data=redo.corr.df, aes(x=Var1, y=Var2)) +#
    geom_tile(aes(fill = r), colour = "white") +#
    geom_point(data=subset(redo.corr.df,!is.na(bh95.qsig)), aes(x=Var1, y=Var2),#
        colour = "grey30", size=2.5, shape=21) +#
    geom_point(data=subset(redo.corr.df,!is.na(bky06.qsig)), aes(x=Var1, y=Var2),#
        colour = "grey30", size=1.5, shape=8) +#
    scale_fill_gradientn(name="Spearman's rho", #
        limits = c(-1,1),#
        breaks=c(-1,-0.7,-0.5,0,0.5,0.7,1),#
        colours = rev(brewer.pal(11, name="RdYlBu")),#
        na.value = "white",#
        guide = guide_colorbar(barwidth = 15, barheight = 1, nbin = 50, #
            draw.ulim = FALSE, draw.llim = FALSE,#
            title.theme = element_text(size=10, colour = "grey20", angle = 0))) +#
    scale_x_discrete("", expand = c(0, 0)) + #
    scale_y_discrete("", expand = c(0, 0)) +#
    theme(panel.grid.major = element_blank(),#
        panel.background = element_rect(fill = "white", colour = NA), #
        axis.ticks = element_blank(),#
        axis.text.y = element_text(size = 8, colour = "grey30"),#
        axis.text.x = element_text(size = 8, colour = "grey30",#
            angle = 90, hjust = 0, vjust = 0.5),#
        legend.position = "bottom",#
        legend.title = element_text(size = 12))
ggplot(data=redo.corr.df, aes(x=Var1, y=Var2)) +#
    geom_tile(aes(fill = r), colour = "white") +#
    geom_point(data=subset(redo.corr.df,!is.na(bh95.qsig)), aes(x=Var1, y=Var2),#
        colour = "grey30", size=1.5, shape=8) +#
    geom_point(data=subset(redo.corr.df,!is.na(bky06.qsig)), aes(x=Var1, y=Var2),#
        colour = "grey30", size=2.5, shape=21) +#
    scale_fill_gradientn(name="Spearman's rho", #
        limits = c(-1,1),#
        breaks=c(-1,-0.7,-0.5,0,0.5,0.7,1),#
        colours = rev(brewer.pal(11, name="RdYlBu")),#
        na.value = "white",#
        guide = guide_colorbar(barwidth = 15, barheight = 1, nbin = 50, #
            draw.ulim = FALSE, draw.llim = FALSE,#
            title.theme = element_text(size=10, colour = "grey20", angle = 0))) +#
    scale_x_discrete("", expand = c(0, 0)) + #
    scale_y_discrete("", expand = c(0, 0)) +#
    theme(panel.grid.major = element_blank(),#
        panel.background = element_rect(fill = "white", colour = NA), #
        axis.ticks = element_blank(),#
        axis.text.y = element_text(size = 8, colour = "grey30"),#
        axis.text.x = element_text(size = 8, colour = "grey30",#
            angle = 90, hjust = 0, vjust = 0.5),#
        legend.position = "bottom",#
        legend.title = element_text(size = 12))
redo.corr.df
redo.corr.df$psig = ifelse(redo.corr.df$p<alpha.cor,1,NA)
ggplot(data=redo.corr.df, aes(x=Var1, y=Var2)) +#
    geom_tile(aes(fill = r), colour = "white") +#
    geom_point(data=subset(redo.corr.df,!is.na(psig)), aes(x=Var1, y=Var2),#
        colour = "grey30", size=5, shape=0) +#
    geom_point(data=subset(redo.corr.df,!is.na(bh95.qsig)), aes(x=Var1, y=Var2),#
        colour = "grey30", size=1.5, shape=8) +#
    geom_point(data=subset(redo.corr.df,!is.na(bky06.qsig)), aes(x=Var1, y=Var2),#
        colour = "grey30", size=2.5, shape=21) +#
    scale_fill_gradientn(name="Spearman's rho", #
        limits = c(-1,1),#
        breaks=c(-1,-0.7,-0.5,0,0.5,0.7,1),#
        colours = rev(brewer.pal(11, name="RdYlBu")),#
        na.value = "white",#
        guide = guide_colorbar(barwidth = 15, barheight = 1, nbin = 50, #
            draw.ulim = FALSE, draw.llim = FALSE,#
            title.theme = element_text(size=10, colour = "grey20", angle = 0))) +#
    scale_x_discrete("", expand = c(0, 0)) + #
    scale_y_discrete("", expand = c(0, 0)) +#
    theme(panel.grid.major = element_blank(),#
        panel.background = element_rect(fill = "white", colour = NA), #
        axis.ticks = element_blank(),#
        axis.text.y = element_text(size = 8, colour = "grey30"),#
        axis.text.x = element_text(size = 8, colour = "grey30",#
            angle = 90, hjust = 0, vjust = 0.5),#
        legend.position = "bottom",#
        legend.title = element_text(size = 12))
rm(list=ls())#
# zipped data files are assumed to be in the following directory:#
working.dir = "~/Dropbox/school/berkeley/_2015_spring/econ270d/problem_sets/ps1/"#
#
zip.file.num ="11793"#
zip.fn = paste(working.dir, "study_", zip.file.num, sep="")#
unzipped.fn = unzip(paste(zip.fn, ".zip", sep=""), exdir = zip.fn)#
#
article.data = sapply(unzipped.fn, #
    function(fn) if(length(grep("tab$", fn))>0) read.delim(fn))#
article.data = article.data[!sapply(article.data, is.null)]#
article.data.names.strip = do.call("rbind",#
    strsplit(names(article.data), .Platform$file.sep))#
names(article.data) = gsub(".tab$", "", #
    article.data.names.strip[,ncol(article.data.names.strip)])
article.data
library(dplyr)
?rbind_all
one <- mtcars[1:10, ]#
two <- mtcars[11:32, ]
one
two
two = two[,-5]
two
rbind_all(one,two)
rbind_list(one,two)
temp=require(c("dplyr","lubridate"))
temp=require("dplyr")
temp
?try
ifelse(require("lubridate")),"yay","boo")
ifelse(require("lubridate"),"yay","boo")
library("lubridate")
mdy
pkgs.req = c("dplyr", "lubridate") # dplyr::rbind_all, lubridate::mdy#
	sapply(pkgs.req, function(p) if(!require(p)) install.packages(p);library(p))
sapply(pkgs.req, function(p) if(!require(p)){install.packages(p);library(p)})
?library
pkgs.req = c("dplyr", "lubridate") # dplyr::rbind_all, lubridate::mdy#
	sapply(pkgs.req, function(p) if(!require(p)){install.packages(p);library(p, character.only=TRUE)})
?require
pkgs.req = c("dplyr", "lubridate") # dplyr::rbind_all, lubridate::mdy#
	sapply(pkgs.req, function(p) if(!require(p, character.only = TRUE)){install.packages(p);library(p, character.only=TRUE)})
# ------------------------------------------------------------------------------#
# set globals:#
# ------------------------------------------------------------------------------#
rm(list=ls())#
#
# this file assumes you've downloaded CSVs from #
# https://www.kaggle.com/c/march-machine-learning-mania-2015/data #
# to the following directory#
# (modify as needed):#
data.dir = "~/Dropbox/kaggle/marchmania2015/"#
#
# ------------------------------------------------------------------------------#
# load libraries:#
# ------------------------------------------------------------------------------#
#
library(dplyr)     # rbind_all#
library(lubridate) # mdy#
#
# ------------------------------------------------------------------------------#
# load data:#
# ------------------------------------------------------------------------------#
#
# there may be other CSV files in this directory... let's specify the list manually rather than using list.files()#
csvs.to.load = c("teams", "seasons", "regular_season_compact_results", "regular_season_detailed_results", #
	"tourney_compact_results", "tourney_detailed_results", "tourney_seeds", "tourney_slots")#
march.mania.df.list = sapply(csvs.to.load, function(fn) read.csv(paste(data.dir,fn,".csv",sep="")))#
#
# ------------------------------------------------------------------------------#
# clean/merge/summarize data:#
# ------------------------------------------------------------------------------#
#
march.mania.df.list$regular_season_results = merge(#
	march.mania.df.list$regular_season_compact_results, #
	march.mania.df.list$regular_season_detailed_results, #
	all = TRUE)#
march.mania.df.list$regular_season_results$game.type = "Regular Season"#
#
march.mania.df.list$tourney_results = merge(#
	march.mania.df.list$tourney_compact_results, #
	march.mania.df.list$tourney_detailed_results, #
	all = TRUE)#
march.mania.df.list$tourney_results$game.type = "Tournament"#
#
march.mania.df.list$tourney_seeds$seed.region = factor(substr(march.mania.df.list$tourney_seeds$seed, 1, 1))#
march.mania.df.list$tourney_seeds$seed.playin = factor(substr(march.mania.df.list$tourney_seeds$seed, 4, 4))#
march.mania.df.list$tourney_seeds$seed = as.numeric(substr(march.mania.df.list$tourney_seeds$seed, 2, 3))#
#
march.mania.df.list$tourney_results = merge(#
	march.mania.df.list$tourney_results, #
	march.mania.df.list$tourney_seeds, #
	by.x = c("season", "lteam"), #
	by.y = c("season", "team"),#
	all.x = TRUE)#
colnames(march.mania.df.list$tourney_results)[grep("^seed",colnames(march.mania.df.list$tourney_results))] = paste("l", grep("^seed",colnames(march.mania.df.list$tourney_results), value=TRUE), sep="")#
march.mania.df.list$tourney_results = merge(#
	march.mania.df.list$tourney_results, #
	march.mania.df.list$tourney_seeds, #
	by.x = c("season", "wteam"), #
	by.y = c("season", "team"),#
	all.x = TRUE)#
colnames(march.mania.df.list$tourney_results)[grep("^seed",colnames(march.mania.df.list$tourney_results))] = paste("w", grep("^seed",colnames(march.mania.df.list$tourney_results), value=TRUE), sep="")#
#
march.mania.df.list$game_results = rbind_all(march.mania.df.list$regular_season_results, march.mania.df.list$tourney_results)#
march.mania.df.list$game_results$game.type = factor(march.mania.df.list$game_results$game.type)#
march.mania.df.list$game_results$wteam.name = factor(march.mania.df.list$game_results$wteam,#
	levels=march.mania.df.list$teams$team_id,#
	labels=march.mania.df.list$teams$team_name)#
march.mania.df.list$game_results$lteam.name = factor(march.mania.df.list$game_results$lteam,#
	levels=march.mania.df.list$teams$team_id,#
	labels=march.mania.df.list$teams$team_name)#
#
march.mania.df.list$game_results = merge(march.mania.df.list$game_results, march.mania.df.list$seasons[,c("season","dayzero")])#
march.mania.df.list$game_results$dayzero = mdy(as.character(march.mania.df.list$game_results$dayzero))#
march.mania.df.list$game_results$date = march.mania.df.list$game_results$dayzero + days(march.mania.df.list$game_results$daynum)
# ------------------------------------------------------------------------------#
# set globals:#
# ------------------------------------------------------------------------------#
rm(list=ls())#
#
# this file assumes you've downloaded CSVs from #
# https://www.kaggle.com/c/march-machine-learning-mania-2015/data #
# to the following directory#
# (modify as needed):#
data.dir = "~/Dropbox/kaggle/marchmania2015/"#
#
# ------------------------------------------------------------------------------#
# load libraries:#
# ------------------------------------------------------------------------------#
#
library(dplyr)     # rbind_all#
library(lubridate) # mdy#
#
# ------------------------------------------------------------------------------#
# load data:#
# ------------------------------------------------------------------------------#
#
# there may be other CSV files in this directory... let's specify the list manually rather than using list.files()#
csvs.to.load = c("teams", "seasons", "regular_season_compact_results", "regular_season_detailed_results", #
	"tourney_compact_results", "tourney_detailed_results", "tourney_seeds", "tourney_slots")#
march.mania.df.list = sapply(csvs.to.load, function(fn) read.csv(paste(data.dir,fn,".csv",sep="")))#
#
# ------------------------------------------------------------------------------#
# clean/merge/summarize data:#
# ------------------------------------------------------------------------------#
#
march.mania.df.list$regular_season_results = merge(#
	march.mania.df.list$regular_season_compact_results, #
	march.mania.df.list$regular_season_detailed_results, #
	all = TRUE)#
march.mania.df.list$regular_season_results$game.type = "Regular Season"#
#
march.mania.df.list$tourney_results = merge(#
	march.mania.df.list$tourney_compact_results, #
	march.mania.df.list$tourney_detailed_results, #
	all = TRUE)#
march.mania.df.list$tourney_results$game.type = "Tournament"#
#
march.mania.df.list$tourney_seeds$seed.region = factor(substr(march.mania.df.list$tourney_seeds$seed, 1, 1))#
march.mania.df.list$tourney_seeds$seed.playin = factor(substr(march.mania.df.list$tourney_seeds$seed, 4, 4))#
march.mania.df.list$tourney_seeds$seed = as.numeric(substr(march.mania.df.list$tourney_seeds$seed, 2, 3))#
#
march.mania.df.list$tourney_results = merge(#
	march.mania.df.list$tourney_results, #
	march.mania.df.list$tourney_seeds, #
	by.x = c("season", "lteam"), #
	by.y = c("season", "team"),#
	all.x = TRUE)#
colnames(march.mania.df.list$tourney_results)[grep("^seed",colnames(march.mania.df.list$tourney_results))] = paste("l", grep("^seed",colnames(march.mania.df.list$tourney_results), value=TRUE), sep="")#
march.mania.df.list$tourney_results = merge(#
	march.mania.df.list$tourney_results, #
	march.mania.df.list$tourney_seeds, #
	by.x = c("season", "wteam"), #
	by.y = c("season", "team"),#
	all.x = TRUE)#
colnames(march.mania.df.list$tourney_results)[grep("^seed",colnames(march.mania.df.list$tourney_results))] = paste("w", grep("^seed",colnames(march.mania.df.list$tourney_results), value=TRUE), sep="")#
#
march.mania.df.list$game_results = rbind_all(march.mania.df.list[c("regular_season_results","tourney_results")])#
march.mania.df.list$game_results$game.type = factor(march.mania.df.list$game_results$game.type)#
march.mania.df.list$game_results$wteam.name = factor(march.mania.df.list$game_results$wteam,#
	levels=march.mania.df.list$teams$team_id,#
	labels=march.mania.df.list$teams$team_name)#
march.mania.df.list$game_results$lteam.name = factor(march.mania.df.list$game_results$lteam,#
	levels=march.mania.df.list$teams$team_id,#
	labels=march.mania.df.list$teams$team_name)#
#
march.mania.df.list$game_results = merge(march.mania.df.list$game_results, march.mania.df.list$seasons[,c("season","dayzero")])#
march.mania.df.list$game_results$dayzero = mdy(as.character(march.mania.df.list$game_results$dayzero))#
march.mania.df.list$game_results$date = march.mania.df.list$game_results$dayzero + days(march.mania.df.list$game_results$daynum)
head(march.mania.df.list$game_results)
head(march.mania.df.list$regular_season_results)
head(march.mania.df.list$tourney_results)
is.factor(march.mania.df.list$tourney_results)
sapply(march.mania.df.list$tourney_results,is.factor)
?read.csvs
?read.csv
# ------------------------------------------------------------------------------#
# set globals:#
# ------------------------------------------------------------------------------#
rm(list=ls())#
#
# this file assumes you've downloaded CSVs from #
# https://www.kaggle.com/c/march-machine-learning-mania-2015/data #
# to the following directory#
# (modify as needed):#
data.dir = "~/Dropbox/kaggle/marchmania2015/"#
#
# ------------------------------------------------------------------------------#
# load libraries:#
# ------------------------------------------------------------------------------#
#
library(dplyr)     # rbind_all#
library(lubridate) # mdy#
#
# ------------------------------------------------------------------------------#
# load data:#
# ------------------------------------------------------------------------------#
#
# there may be other CSV files in this directory... let's specify the list manually rather than using list.files()#
csvs.to.load = c("teams", "seasons", "regular_season_compact_results", "regular_season_detailed_results", #
	"tourney_compact_results", "tourney_detailed_results", "tourney_seeds", "tourney_slots")#
march.mania.df.list = sapply(csvs.to.load, #
	function(fn) read.csv(paste(data.dir,fn,".csv",sep=""), stringsAsFactors=FALSE))#
#
# ------------------------------------------------------------------------------#
# clean/merge/summarize data:#
# ------------------------------------------------------------------------------#
#
march.mania.df.list$regular_season_results = merge(#
	march.mania.df.list$regular_season_compact_results, #
	march.mania.df.list$regular_season_detailed_results, #
	all = TRUE)#
march.mania.df.list$regular_season_results$game.type = "Regular Season"#
#
march.mania.df.list$tourney_results = merge(#
	march.mania.df.list$tourney_compact_results, #
	march.mania.df.list$tourney_detailed_results, #
	all = TRUE)#
march.mania.df.list$tourney_results$game.type = "Tournament"#
#
# convert seed.region and seed.playin to factors later#
march.mania.df.list$tourney_seeds$seed.region = substr(march.mania.df.list$tourney_seeds$seed, 1, 1)#
march.mania.df.list$tourney_seeds$seed.playin = substr(march.mania.df.list$tourney_seeds$seed, 4, 4)#
march.mania.df.list$tourney_seeds$seed = as.numeric(substr(march.mania.df.list$tourney_seeds$seed, 2, 3))#
#
march.mania.df.list$tourney_results = merge(#
	march.mania.df.list$tourney_results, #
	march.mania.df.list$tourney_seeds, #
	by.x = c("season", "lteam"), #
	by.y = c("season", "team"),#
	all.x = TRUE)#
colnames(march.mania.df.list$tourney_results)[grep("^seed",colnames(march.mania.df.list$tourney_results))] = paste("l", grep("^seed",colnames(march.mania.df.list$tourney_results), value=TRUE), sep="")#
march.mania.df.list$tourney_results = merge(#
	march.mania.df.list$tourney_results, #
	march.mania.df.list$tourney_seeds, #
	by.x = c("season", "wteam"), #
	by.y = c("season", "team"),#
	all.x = TRUE)#
colnames(march.mania.df.list$tourney_results)[grep("^seed",colnames(march.mania.df.list$tourney_results))] = paste("w", grep("^seed",colnames(march.mania.df.list$tourney_results), value=TRUE), sep="")#
#
march.mania.df.list$game_results = rbind_all(march.mania.df.list[c("regular_season_results","tourney_results")])
summary(march.mania.df.list$game_results)
head(sapply(march.mania.df.list$game_results[,#
	c("game.type", "wloc","wseed.region","wseed.playin","lseed.region","lseed.playin")], factor))
summary(sapply(march.mania.df.list$game_results[,#
	c("game.type", "wloc","wseed.region","wseed.playin","lseed.region","lseed.playin")], factor))
blank.seed = which(march.mania.df.list$game_results[,c("wseed.region","wseed.playin","lseed.region","lseed.playin")]=="")#
	march.mania.df.list$game_results[blank.seed,c("wseed.region","wseed.playin","lseed.region","lseed.playin")] = NA
summary(sapply(march.mania.df.list$game_results[,#
	c("game.type", "wloc","wseed.region","wseed.playin","lseed.region","lseed.playin")], factor))
?substr
unique(march.mania.df.list$tourney_seeds$seed.playin)
rm(list=ls())#
#
# this file assumes you've downloaded CSVs from #
# https://www.kaggle.com/c/march-machine-learning-mania-2015/data #
# to the following directory#
# (modify as needed):#
data.dir = "~/Dropbox/kaggle/marchmania2015/"#
#
# ------------------------------------------------------------------------------#
# load libraries:#
# ------------------------------------------------------------------------------#
#
library(dplyr)     # rbind_all#
library(lubridate) # mdy#
#
# ------------------------------------------------------------------------------#
# load data:#
# ------------------------------------------------------------------------------#
#
# there may be other CSV files in this directory... let's specify the list manually rather than using list.files()#
csvs.to.load = c("teams", "seasons", "regular_season_compact_results", "regular_season_detailed_results", #
	"tourney_compact_results", "tourney_detailed_results", "tourney_seeds", "tourney_slots")#
march.mania.df.list = sapply(csvs.to.load, #
	function(fn) read.csv(paste(data.dir,fn,".csv",sep=""), stringsAsFactors=FALSE))#
#
# ------------------------------------------------------------------------------#
# clean/merge/summarize data:#
# ------------------------------------------------------------------------------#
#
march.mania.df.list$regular_season_results = merge(#
	march.mania.df.list$regular_season_compact_results, #
	march.mania.df.list$regular_season_detailed_results, #
	all = TRUE)#
march.mania.df.list$regular_season_results$game.type = "Regular Season"#
#
march.mania.df.list$tourney_results = merge(#
	march.mania.df.list$tourney_compact_results, #
	march.mania.df.list$tourney_detailed_results, #
	all = TRUE)#
march.mania.df.list$tourney_results$game.type = "Tournament"#
#
# convert seed.region and seed.playin to factors later#
march.mania.df.list$tourney_seeds$seed.region = substr(march.mania.df.list$tourney_seeds$seed, 1, 1)#
march.mania.df.list$tourney_seeds$seed.playin = substr(march.mania.df.list$tourney_seeds$seed, 4, 4)#
march.mania.df.list$tourney_seeds$seed = as.numeric(substr(march.mania.df.list$tourney_seeds$seed, 2, 3))#
#
march.mania.df.list$tourney_results = merge(#
	march.mania.df.list$tourney_results, #
	march.mania.df.list$tourney_seeds, #
	by.x = c("season", "lteam"), #
	by.y = c("season", "team"),#
	all.x = TRUE)#
colnames(march.mania.df.list$tourney_results)[grep("^seed",colnames(march.mania.df.list$tourney_results))] = paste("l", grep("^seed",colnames(march.mania.df.list$tourney_results), value=TRUE), sep="")#
march.mania.df.list$tourney_results = merge(#
	march.mania.df.list$tourney_results, #
	march.mania.df.list$tourney_seeds, #
	by.x = c("season", "wteam"), #
	by.y = c("season", "team"),#
	all.x = TRUE)#
colnames(march.mania.df.list$tourney_results)[grep("^seed",colnames(march.mania.df.list$tourney_results))] = paste("w", grep("^seed",colnames(march.mania.df.list$tourney_results), value=TRUE), sep="")#
#
march.mania.df.list$game_results = rbind_all(march.mania.df.list[c("regular_season_results","tourney_results")])
repl.blank.with.na = function(col){#
	col[col==""] = NA#
	return(col)#
}#
sapply(march.mania.df.list$game_results[,c("wseed.region","wseed.playin","lseed.region","lseed.playin")], repl.blank.with.na)
str.to.fac = c("wseed.region","wseed.playin","lseed.region","lseed.playin","game.type", "wloc")#
march.mania.df.list$game_results[,str.to.fac[1:4]] = sapply(march.mania.df.list$game_results[,str.to.fac[1:4]], repl.blank.with.na)#
sapply(march.mania.df.list$game_results[,str.to.fac], factor)
march.mania.df.list$game_results[,str.to.fac] = sapply(march.mania.df.list$game_results[,str.to.fac], factor)
summary(march.mania.df.list$game_results[,str.to.fac])
summary(sapply(march.mania.df.list$game_results[,str.to.fac], as.factor))
rm(list=ls())#
#
# this file assumes you've downloaded CSVs from #
# https://www.kaggle.com/c/march-machine-learning-mania-2015/data #
# to the following directory#
# (modify as needed):#
data.dir = "~/Dropbox/kaggle/marchmania2015/"#
#
# ------------------------------------------------------------------------------#
# load libraries:#
# ------------------------------------------------------------------------------#
#
library(dplyr)     # rbind_all#
library(lubridate) # mdy#
#
# ------------------------------------------------------------------------------#
# load data:#
# ------------------------------------------------------------------------------#
#
# there may be other CSV files in this directory... let's specify the list manually rather than using list.files()#
csvs.to.load = c("teams", "seasons", "regular_season_compact_results", "regular_season_detailed_results", #
	"tourney_compact_results", "tourney_detailed_results", "tourney_seeds", "tourney_slots")#
march.mania.df.list = sapply(csvs.to.load, #
	function(fn) read.csv(paste(data.dir,fn,".csv",sep=""), stringsAsFactors=FALSE))#
#
# ------------------------------------------------------------------------------#
# clean/merge/summarize data:#
# ------------------------------------------------------------------------------#
#
march.mania.df.list$regular_season_results = merge(#
	march.mania.df.list$regular_season_compact_results, #
	march.mania.df.list$regular_season_detailed_results, #
	all = TRUE)#
march.mania.df.list$regular_season_results$game.type = "Regular Season"#
#
march.mania.df.list$tourney_results = merge(#
	march.mania.df.list$tourney_compact_results, #
	march.mania.df.list$tourney_detailed_results, #
	all = TRUE)#
march.mania.df.list$tourney_results$game.type = "Tournament"#
#
# convert seed.region and seed.playin to factors later#
march.mania.df.list$tourney_seeds$seed.region = substr(march.mania.df.list$tourney_seeds$seed, 1, 1)#
march.mania.df.list$tourney_seeds$seed.playin = substr(march.mania.df.list$tourney_seeds$seed, 4, 4)#
march.mania.df.list$tourney_seeds$seed = as.numeric(substr(march.mania.df.list$tourney_seeds$seed, 2, 3))#
#
march.mania.df.list$tourney_results = merge(#
	march.mania.df.list$tourney_results, #
	march.mania.df.list$tourney_seeds, #
	by.x = c("season", "lteam"), #
	by.y = c("season", "team"),#
	all.x = TRUE)#
colnames(march.mania.df.list$tourney_results)[grep("^seed",colnames(march.mania.df.list$tourney_results))] = paste("l", grep("^seed",colnames(march.mania.df.list$tourney_results), value=TRUE), sep="")#
march.mania.df.list$tourney_results = merge(#
	march.mania.df.list$tourney_results, #
	march.mania.df.list$tourney_seeds, #
	by.x = c("season", "wteam"), #
	by.y = c("season", "team"),#
	all.x = TRUE)#
colnames(march.mania.df.list$tourney_results)[grep("^seed",colnames(march.mania.df.list$tourney_results))] = paste("w", grep("^seed",colnames(march.mania.df.list$tourney_results), value=TRUE), sep="")#
#
march.mania.df.list$game_results = rbind_all(march.mania.df.list[c("regular_season_results","tourney_results")])#
#
repl.blank.with.na = function(col){#
	col[col==""] = NA#
	return(col)#
}#
str.to.fac = c("wseed.region","wseed.playin","lseed.region","lseed.playin","game.type", "wloc")#
march.mania.df.list$game_results[,str.to.fac[1:4]] = sapply(march.mania.df.list$game_results[,str.to.fac[1:4]], repl.blank.with.na)#
march.mania.df.list$game_results[,str.to.fac] = sapply(march.mania.df.list$game_results[,str.to.fac], as.factor)
summary( march.mania.df.list$game_results[,str.to.fac])
head(march.mania.df.list$game_results[,str.to.fac])
head(sapply(march.mania.df.list$game_results[,str.to.fac], as.factor))
summary(march.mania.df.list$game_results[,str.to.fac])
summary(sapply(march.mania.df.list$game_results[,str.to.fac], as.factor))
march.mania.df.list$game_results[,str.to.fac] = sapply(march.mania.df.list$game_results[,str.to.fac], as.factor)
summary(march.mania.df.list$game_results[,str.to.fac])
head(lapply(march.mania.df.list$game_results[,str.to.fac], as.factor))
temp = lapply(march.mania.df.list$game_results[,str.to.fac], as.factor)
dim(temp)
length(temp)
do.call(cbind, temp)
temp = as.data.frame(lapply(march.mania.df.list$game_results[,str.to.fac], as.factor))
dim(temp)
head(temp)
summary(temp)
# ------------------------------------------------------------------------------#
# set globals:#
# ------------------------------------------------------------------------------#
rm(list=ls())#
#
# this file assumes you've downloaded CSVs from #
# https://www.kaggle.com/c/march-machine-learning-mania-2015/data #
# to the following directory#
# (modify as needed):#
data.dir = "~/Dropbox/kaggle/marchmania2015/"#
#
# ------------------------------------------------------------------------------#
# load libraries:#
# ------------------------------------------------------------------------------#
#
library(dplyr)     # rbind_all#
library(lubridate) # mdy#
#
# ------------------------------------------------------------------------------#
# load data:#
# ------------------------------------------------------------------------------#
#
# there may be other CSV files in this directory... let's specify the list manually rather than using list.files()#
csvs.to.load = c("teams", "seasons", "regular_season_compact_results", "regular_season_detailed_results", #
	"tourney_compact_results", "tourney_detailed_results", "tourney_seeds", "tourney_slots")#
march.mania.df.list = sapply(csvs.to.load, #
	function(fn) read.csv(paste(data.dir,fn,".csv",sep=""), stringsAsFactors=FALSE))#
#
# ------------------------------------------------------------------------------#
# clean/merge/summarize data:#
# ------------------------------------------------------------------------------#
#
march.mania.df.list$regular_season_results = merge(#
	march.mania.df.list$regular_season_compact_results, #
	march.mania.df.list$regular_season_detailed_results, #
	all = TRUE)#
march.mania.df.list$regular_season_results$game.type = "Regular Season"#
#
march.mania.df.list$tourney_results = merge(#
	march.mania.df.list$tourney_compact_results, #
	march.mania.df.list$tourney_detailed_results, #
	all = TRUE)#
march.mania.df.list$tourney_results$game.type = "Tournament"#
#
# convert seed.region and seed.playin to factors later#
march.mania.df.list$tourney_seeds$seed.region = substr(march.mania.df.list$tourney_seeds$seed, 1, 1)#
march.mania.df.list$tourney_seeds$seed.playin = substr(march.mania.df.list$tourney_seeds$seed, 4, 4)#
march.mania.df.list$tourney_seeds$seed = as.numeric(substr(march.mania.df.list$tourney_seeds$seed, 2, 3))#
#
march.mania.df.list$tourney_results = merge(#
	march.mania.df.list$tourney_results, #
	march.mania.df.list$tourney_seeds, #
	by.x = c("season", "lteam"), #
	by.y = c("season", "team"),#
	all.x = TRUE)#
colnames(march.mania.df.list$tourney_results)[grep("^seed",colnames(march.mania.df.list$tourney_results))] = paste("l", grep("^seed",colnames(march.mania.df.list$tourney_results), value=TRUE), sep="")#
march.mania.df.list$tourney_results = merge(#
	march.mania.df.list$tourney_results, #
	march.mania.df.list$tourney_seeds, #
	by.x = c("season", "wteam"), #
	by.y = c("season", "team"),#
	all.x = TRUE)#
colnames(march.mania.df.list$tourney_results)[grep("^seed",colnames(march.mania.df.list$tourney_results))] = paste("w", grep("^seed",colnames(march.mania.df.list$tourney_results), value=TRUE), sep="")#
#
march.mania.df.list$game_results = rbind_all(march.mania.df.list[c("regular_season_results","tourney_results")])#
#
repl.blank.with.na = function(col){#
	col[col==""] = NA#
	return(col)#
}#
str.to.fac = c("wseed.region","wseed.playin","lseed.region","lseed.playin","game.type", "wloc")#
march.mania.df.list$game_results[,str.to.fac[1:4]] = sapply(march.mania.df.list$game_results[,str.to.fac[1:4]], repl.blank.with.na)#
# sapply can't be used here -- converts to character and nullifies the as.factor()#
march.mania.df.list$game_results[,str.to.fac] = as.data.frame(lapply(march.mania.df.list$game_results[,str.to.fac], as.factor))
summary(march.mania.df.list)
summary(march.mania.df.list$game_results)
summary(as.data.frame(lapply(march.mania.df.list$game_results[,c("wteam.name","lteam.name")],#
	factor, levels=march.mania.df.list$teams$team_id, labels=march.mania.df.list$teams$team_name)))
march.mania.df.list$game_results[,c("wteam.name","lteam.name")] = NA
summary(as.data.frame(lapply(march.mania.df.list$game_results[,c("wteam.name","lteam.name")],#
	factor, levels=march.mania.df.list$teams$team_id, labels=march.mania.df.list$teams$team_name)))
summary(sapply(march.mania.df.list$game_results[,c("wteam.name","lteam.name")],#
	factor, levels=march.mania.df.list$teams$team_id, labels=march.mania.df.list$teams$team_name))
summary(lapply(march.mania.df.list$game_results[,c("wteam.name","lteam.name")],#
	factor, levels=march.mania.df.list$teams$team_id, labels=march.mania.df.list$teams$team_name))[[1]])
summary(lapply(march.mania.df.list$game_results[,c("wteam.name","lteam.name")],#
	factor, levels=march.mania.df.list$teams$team_id, labels=march.mania.df.list$teams$team_name)[[1]])
summary(as.data.frame(lapply(march.mania.df.list$game_results[,c("wteam","lteam")],#
	factor, levels=march.mania.df.list$teams$team_id, labels=march.mania.df.list$teams$team_name)))
summary(sapply(march.mania.df.list$game_results[,c("wteam","lteam")],#
	factor, levels=march.mania.df.list$teams$team_id, labels=march.mania.df.list$teams$team_name))
march.mania.df.list$game_results[,c("wteam.name","lteam.name")] = sapply(march.mania.df.list$game_results[,c("wteam","lteam")],#
	factor, levels=march.mania.df.list$teams$team_id, labels=march.mania.df.list$teams$team_name)
summary(march.mania.df.list$game_results[,c("wteam.name","lteam.name")])
march.mania.df.list$game_results[,c("wteam.name","lteam.name")] = as.data.frame(lapply(march.mania.df.list$game_results[,c("wteam","lteam")],#
	factor, levels=march.mania.df.list$teams$team_id, labels=march.mania.df.list$teams$team_name))
summary(march.mania.df.list$game_results[,c("wteam.name","lteam.name")])
march.mania.df.list$game_results = merge(march.mania.df.list$game_results, march.mania.df.list$seasons[,c("season","dayzero")])#
	march.mania.df.list$game_results$dayzero = mdy(as.character(march.mania.df.list$game_results$dayzero))#
	march.mania.df.list$game_results$date = march.mania.df.list$game_results$dayzero + days(march.mania.df.list$game_results$daynum)
summary(march.mania.df.list$game_results$date)
summary(march.mania.df.list$game_results)
head(do.call("c", sapply(as.numeric(table(march.mania.df.list$game_results$season)), seq)))
head(march.mania.df.list$game_results$wteam)
class(march.mania.df.list$game_results$wteam)
head(paste(march.mania.df.list$game_results[,c("season","dayzero","wteam")]))
paste(march.mania.df.list$game_results[1:5,c("season","dayzero","wteam")], collapse="_")
apply(march.mania.df.list$game_results[1:5,c("season","dayzero","wteam")], 1, paste, collapse="_")
?which.max
sort(march.mania.df.list$game_results[1,c("wteam","lteam")])
sort(march.mania.df.list$game_results[10,c("wteam","lteam")])
?which.min
head(apply(march.mania.df.list$game_results[,c("wteam","lteam")], min))
apply(march.mania.df.list$game_results[,c("wteam","lteam")], 1, min)
head(apply(march.mania.df.list$game_results[,c("wteam","lteam")], 1, min))
head(apply(march.mania.df.list$game_results[,c("wteam","lteam")], 1, max))
# ------------------------------------------------------------------------------#
# set globals:#
# ------------------------------------------------------------------------------#
rm(list=ls())#
#
# this file assumes you've downloaded CSVs from #
# https://www.kaggle.com/c/march-machine-learning-mania-2015/data #
# to the following directory#
# (modify as needed):#
data.dir = "~/Dropbox/kaggle/marchmania2015/"#
#
# ------------------------------------------------------------------------------#
# load libraries:#
# ------------------------------------------------------------------------------#
#
library(dplyr)     # rbind_all#
library(lubridate) # mdy#
#
# ------------------------------------------------------------------------------#
# load data:#
# ------------------------------------------------------------------------------#
#
# there may be other CSV files in this directory... let's specify the list manually rather than using list.files()#
csvs.to.load = c("teams", "seasons", "regular_season_compact_results", "regular_season_detailed_results", #
	"tourney_compact_results", "tourney_detailed_results", "tourney_seeds", "tourney_slots")#
march.mania.df.list = sapply(csvs.to.load, #
	function(fn) read.csv(paste(data.dir,fn,".csv",sep=""), stringsAsFactors=FALSE))#
#
# ------------------------------------------------------------------------------#
# clean/merge/summarize data:#
# ------------------------------------------------------------------------------#
#
march.mania.df.list$regular_season_results = merge(#
	march.mania.df.list$regular_season_compact_results, #
	march.mania.df.list$regular_season_detailed_results, #
	all = TRUE)#
march.mania.df.list$regular_season_results$game.type = "Regular Season"#
#
march.mania.df.list$tourney_results = merge(#
	march.mania.df.list$tourney_compact_results, #
	march.mania.df.list$tourney_detailed_results, #
	all = TRUE)#
march.mania.df.list$tourney_results$game.type = "Tournament"#
#
# convert seed.region and seed.playin to factors later#
march.mania.df.list$tourney_seeds$seed.region = substr(march.mania.df.list$tourney_seeds$seed, 1, 1)#
march.mania.df.list$tourney_seeds$seed.playin = substr(march.mania.df.list$tourney_seeds$seed, 4, 4)#
march.mania.df.list$tourney_seeds$seed = as.numeric(substr(march.mania.df.list$tourney_seeds$seed, 2, 3))#
#
march.mania.df.list$tourney_results = merge(#
	march.mania.df.list$tourney_results, #
	march.mania.df.list$tourney_seeds, #
	by.x = c("season", "lteam"), #
	by.y = c("season", "team"),#
	all.x = TRUE)#
colnames(march.mania.df.list$tourney_results)[grep("^seed",colnames(march.mania.df.list$tourney_results))] = paste("l", grep("^seed",colnames(march.mania.df.list$tourney_results), value=TRUE), sep="")#
march.mania.df.list$tourney_results = merge(#
	march.mania.df.list$tourney_results, #
	march.mania.df.list$tourney_seeds, #
	by.x = c("season", "wteam"), #
	by.y = c("season", "team"),#
	all.x = TRUE)#
colnames(march.mania.df.list$tourney_results)[grep("^seed",colnames(march.mania.df.list$tourney_results))] = paste("w", grep("^seed",colnames(march.mania.df.list$tourney_results), value=TRUE), sep="")#
#
march.mania.df.list$game_results = rbind_all(march.mania.df.list[c("regular_season_results","tourney_results")])#
#
repl.blank.with.na = function(col){#
	col[col==""] = NA#
	return(col)#
}#
str.to.fac = c("wseed.region","wseed.playin","lseed.region","lseed.playin","game.type", "wloc")#
march.mania.df.list$game_results[,str.to.fac[1:4]] = sapply(march.mania.df.list$game_results[,str.to.fac[1:4]], repl.blank.with.na)#
# sapply can't be used here -- converts to character and nullifies the as.factor()#
march.mania.df.list$game_results[,str.to.fac] = as.data.frame(lapply(march.mania.df.list$game_results[,str.to.fac], as.factor))#
march.mania.df.list$game_results[,c("wteam.name","lteam.name")] = as.data.frame(lapply(march.mania.df.list$game_results[,c("wteam","lteam")],#
	factor, levels=march.mania.df.list$teams$team_id, labels=march.mania.df.list$teams$team_name))#
#
# "There are no teams that ever played more than one game on a given date, so you can use this fact if you need a unique key."#
march.mania.df.list$game_results$wteam.game.id = apply(march.mania.df.list$game_results[,c("season","daynum","wteam")], #
		1, paste, collapse="_")#
march.mania.df.list$game_results$lteam.game.id = apply(march.mania.df.list$game_results[,c("season","daynum","lteam")], #
		1, paste, collapse="_")#
#
# ID for submission file:#
# "For the submission file, each game has a unique id created by concatenating the season in which the game was played, the team1 id, and the team2 id. For example, "2013_1104_1129" indicates team 1104 played team 1129 in the year 2013. You must predict the probability that the team with the lower id beats the team with the higher id."#
march.mania.df.list$game_results$team1 = apply(march.mania.df.list$game_results[,c("wteam","lteam")], 1, min)#
march.mania.df.list$game_results$team2 = apply(march.mania.df.list$game_results[,c("wteam","lteam")], 1, max)#
march.mania.df.list$game_results$game.id.matchup = apply(march.mania.df.list$game_results[,c("season","team1","team2")], #
	1, paste, collapse="_")#
march.mania.df.list$game_results$game.id.unique = apply(march.mania.df.list$game_results[,c("season","daynum","team1","team2")], #
	1, paste, collapse="_")#
#
march.mania.df.list$game_results = merge(march.mania.df.list$game_results, march.mania.df.list$seasons[,c("season","dayzero")])#
march.mania.df.list$game_results$dayzero = mdy(as.character(march.mania.df.list$game_results$dayzero))#
march.mania.df.list$game_results$date = march.mania.df.list$game_results$dayzero + days(march.mania.df.list$game_results$daynum)
summary(march.mania.df.list$game_results)
load.clean.ncaa = function(data.dir){#
	# ------------------------------------------------------------------------------#
	# load libraries:#
	# ------------------------------------------------------------------------------#
	pkgs.req = c("dplyr", "lubridate") # dplyr::rbind_all, lubridate::mdy#
	temp = sapply(pkgs.req, function(p) if(!require(p, character.only = TRUE)){#
		install.packages(p);library(p, character.only=TRUE)})#
#
	# ------------------------------------------------------------------------------#
	# load data:#
	# ------------------------------------------------------------------------------#
	# there may be other CSV files in this directory... let's specify the list manually rather than using list.files()#
	csvs.to.load = c("teams", "seasons", "regular_season_compact_results", "regular_season_detailed_results", #
		"tourney_compact_results", "tourney_detailed_results", "tourney_seeds", "tourney_slots")#
	# will convert strings to factors later. easier for merging if they stay strings for now.#
	march.mania.df.list = sapply(csvs.to.load, #
		function(fn) read.csv(paste(data.dir,fn,".csv",sep=""), stringsAsFactors=FALSE))#
#
	# ------------------------------------------------------------------------------#
	# clean/merge/summarize data:#
	# ------------------------------------------------------------------------------#
	# merge together the compact and detailed records for "regular season" games#
	march.mania.df.list$regular_season_results = merge(#
		march.mania.df.list$regular_season_compact_results, #
		march.mania.df.list$regular_season_detailed_results, #
		all = TRUE)#
	march.mania.df.list$regular_season_results$game.type = "Regular Season"#
#
	# merge together the compact and detailed records for NCAA tournament games#
	march.mania.df.list$tourney_results = merge(#
		march.mania.df.list$tourney_compact_results, #
		march.mania.df.list$tourney_detailed_results, #
		all = TRUE)#
	march.mania.df.list$tourney_results$game.type = "Tournament"#
#
	# parse the tournament seed information#
	# convert seed.region and seed.playin to factors later#
	march.mania.df.list$tourney_seeds$seed.region = substr(march.mania.df.list$tourney_seeds$seed, 1, 1)#
	march.mania.df.list$tourney_seeds$seed.playin = substr(march.mania.df.list$tourney_seeds$seed, 4, 4)#
	march.mania.df.list$tourney_seeds$seed = as.numeric(substr(march.mania.df.list$tourney_seeds$seed, 2, 3))#
#
	# merge the tournament seed info in with the tournament game info separately for winning and losing teams#
	march.mania.df.list$tourney_results = merge(#
		march.mania.df.list$tourney_results, #
		march.mania.df.list$tourney_seeds, #
		by.x = c("season", "lteam"), #
		by.y = c("season", "team"),#
		all.x = TRUE)#
	colnames(march.mania.df.list$tourney_results)[grep("^seed",colnames(march.mania.df.list$tourney_results))] = paste(#
		"l", grep("^seed",colnames(march.mania.df.list$tourney_results), value=TRUE), sep="")#
	march.mania.df.list$tourney_results = merge(#
		march.mania.df.list$tourney_results, #
		march.mania.df.list$tourney_seeds, #
		by.x = c("season", "wteam"), #
		by.y = c("season", "team"),#
		all.x = TRUE)#
	colnames(march.mania.df.list$tourney_results)[grep("^seed",colnames(march.mania.df.list$tourney_results))] = paste(#
		"w", grep("^seed",colnames(march.mania.df.list$tourney_results), value=TRUE), sep="")#
#
	# stack all games together into one giant data.frame#
	march.mania.df.list$game_results = rbind_all(march.mania.df.list[c("regular_season_results","tourney_results")])#
	# replace blanks with NA's#
	repl.blank.with.na = function(col){#
		col[col==""] = NA#
		return(col)#
	}#
	str.to.fac = c("wseed.region","wseed.playin","lseed.region","lseed.playin","game.type")#
	march.mania.df.list$game_results[,str.to.fac[1:4]] = sapply(march.mania.df.list$game_results[,str.to.fac[1:4]], repl.blank.with.na)#
	# sapply can't be used here -- converts to character and nullifies the as.factor()#
	march.mania.df.list$game_results[,str.to.fac] = as.data.frame(lapply(march.mania.df.list$game_results[,str.to.fac], as.factor))#
	march.mania.df.list$game_results$wloc = factor(as.character(march.mania.df.list$game_results$wloc), #
		levels=c("H","A","N"), labels=c("Home","Away","Neutral"))#
#
	# label the teams with their names, but keep their IDs too#
	march.mania.df.list$game_results[,c("wteam.name","lteam.name")] = as.data.frame(lapply(march.mania.df.list$game_results[,c("wteam","lteam")],#
		factor, levels=march.mania.df.list$teams$team_id, labels=march.mania.df.list$teams$team_name))#
#
	# Create a unique game key for winning and losing teams by exploiting the fact that no teams ever played >1 game on a given date#
	march.mania.df.list$game_results$wteam.game.id = apply(march.mania.df.list$game_results[,c("season","daynum","wteam")], #
		1, paste, collapse="_")#
	march.mania.df.list$game_results$lteam.game.id = apply(march.mania.df.list$game_results[,c("season","daynum","lteam")], #
		1, paste, collapse="_")#
#
	# For predictions, we need to recode the teams into "team1" and "team2" rather than "winner" and "loser"#
	march.mania.df.list$game_results$team1 = apply(march.mania.df.list$game_results[,c("wteam","lteam")], 1, min)#
	march.mania.df.list$game_results$team2 = apply(march.mania.df.list$game_results[,c("wteam","lteam")], 1, max)#
	march.mania.df.list$game_results$game.id.matchup = apply(march.mania.df.list$game_results[,c("season","team1","team2")], #
	1, paste, collapse="_")#
	march.mania.df.list$game_results$game.id.unique = apply(march.mania.df.list$game_results[,c("season","daynum","team1","team2")], #
		1, paste, collapse="_")#
#
	# change [game day-dayzero] to correct dates#
	march.mania.df.list$game_results = merge(march.mania.df.list$game_results, march.mania.df.list$seasons[,c("season","dayzero")])#
	march.mania.df.list$game_results$dayzero = mdy(as.character(march.mania.df.list$game_results$dayzero))#
	march.mania.df.list$game_results$date = march.mania.df.list$game_results$dayzero + days(march.mania.df.list$game_results$daynum)#
#
	# new data frame of team results#
	# be sure not to name any columns above starting with "w" or "l" unless you really mean it!#
	# "loc" starts with "l" so process the "l" first#
	march.mania.df.list$winner_results = march.mania.df.list$game_results#
	colnames(march.mania.df.list$winner_results)[grep("^l", colnames(march.mania.df.list$winner_results))] = gsub("^l","opp.",colnames(march.mania.df.list$winner_results)[grep("^l", colnames(march.mania.df.list$winner_results))])#
	colnames(march.mania.df.list$winner_results)[grep("^w", colnames(march.mania.df.list$winner_results))] = gsub("^w","",colnames(march.mania.df.list$winner_results)[grep("^w", colnames(march.mania.df.list$winner_results))])#
	march.mania.df.list$winner_results$opp.loc = factor(as.character(march.mania.df.list$winner_results$loc), #
		levels=c("Home","Away","Neutral"), labels=c("Away","Home","Neutral"))#
#
	march.mania.df.list$loser_results = march.mania.df.list$game_results#
	colnames(march.mania.df.list$loser_results)[grep("^l", colnames(march.mania.df.list$loser_results))] = gsub("^l","",colnames(march.mania.df.list$loser_results)[grep("^l", colnames(march.mania.df.list$loser_results))])#
	colnames(march.mania.df.list$loser_results)[grep("^w", colnames(march.mania.df.list$loser_results))] = gsub("^w","opp.",colnames(march.mania.df.list$loser_results)[grep("^w", colnames(march.mania.df.list$loser_results))])#
	march.mania.df.list$loser_results$loc = factor(as.character(march.mania.df.list$loser_results$opp.loc), #
		levels=c("Home","Away","Neutral"), labels=c("Away","Home","Neutral"))#
#
	march.mania.df.list$team_results = rbind_all(march.mania.df.list[c("winner_results","loser_results")])#
#
	ncaa.team.results = march.mania.df.list$team_results#
	ncaa.game.results = march.mania.df.list$game_results#
	tourney.slots = march.mania.df.list$tourney_slots#
	tourney.regions = march.mania.df.list$seasons[,-which(colnames(march.mania.df.list$seasons)=="dayzero")]#
#
	return(list(teams = ncaa.team.results, games = ncaa.game.results))#
}
ncaa.results = load.clean.ncaa("~/Dropbox/kaggle/marchmania2015/")
head(ncaa.results[["teams"]])
head(ncaa.results[["games"]])
ncaa.basketball = ncaa.results
rm(list="ncaa.results")
library(ggplot2)
summary(ncaa.basketball[["teams"]])
summary(ncaa.basketball[["games"]])
# this file assumes you've downloaded CSVs from #
# https://www.kaggle.com/c/march-machine-learning-mania-2015/data #
# and placed them on the provided path#
# (empty string should search current working directory)#
load.clean.ncaa = function(data.dir){#
	# ------------------------------------------------------------------------------#
	# load libraries:#
	# ------------------------------------------------------------------------------#
	pkgs.req = c("dplyr", "lubridate") # dplyr::rbind_all, lubridate::mdy#
	temp = sapply(pkgs.req, function(p) if(!require(p, character.only = TRUE)){#
		install.packages(p);library(p, character.only=TRUE)})#
#
	# ------------------------------------------------------------------------------#
	# load data:#
	# ------------------------------------------------------------------------------#
	# there may be other CSV files in this directory... let's specify the list manually rather than using list.files()#
	csvs.to.load = c("teams", "seasons", "regular_season_compact_results", "regular_season_detailed_results", #
		"tourney_compact_results", "tourney_detailed_results", "tourney_seeds", "tourney_slots")#
	# will convert strings to factors later. easier for merging if they stay strings for now.#
	march.mania.df.list = sapply(csvs.to.load, #
		function(fn) read.csv(paste(data.dir,fn,".csv",sep=""), stringsAsFactors=FALSE))#
#
	# ------------------------------------------------------------------------------#
	# clean/merge/summarize data:#
	# ------------------------------------------------------------------------------#
	# merge together the compact and detailed records for "regular season" games#
	march.mania.df.list$regular_season_results = merge(#
		march.mania.df.list$regular_season_compact_results, #
		march.mania.df.list$regular_season_detailed_results, #
		all = TRUE)#
	march.mania.df.list$regular_season_results$game.type = "Regular Season"#
#
	# merge together the compact and detailed records for NCAA tournament games#
	march.mania.df.list$tourney_results = merge(#
		march.mania.df.list$tourney_compact_results, #
		march.mania.df.list$tourney_detailed_results, #
		all = TRUE)#
	march.mania.df.list$tourney_results$game.type = "Tournament"#
#
	# parse the tournament seed information#
	# convert seed.region and seed.playin to factors later#
	march.mania.df.list$tourney_seeds$seed.region = substr(march.mania.df.list$tourney_seeds$seed, 1, 1)#
	march.mania.df.list$tourney_seeds$seed.playin = substr(march.mania.df.list$tourney_seeds$seed, 4, 4)#
	march.mania.df.list$tourney_seeds$seed = as.numeric(substr(march.mania.df.list$tourney_seeds$seed, 2, 3))#
#
	# merge the tournament seed info in with the tournament game info separately for winning and losing teams#
	march.mania.df.list$tourney_results = merge(#
		march.mania.df.list$tourney_results, #
		march.mania.df.list$tourney_seeds, #
		by.x = c("season", "lteam"), #
		by.y = c("season", "team"),#
		all.x = TRUE)#
	colnames(march.mania.df.list$tourney_results)[grep("^seed",colnames(march.mania.df.list$tourney_results))] = paste(#
		"l", grep("^seed",colnames(march.mania.df.list$tourney_results), value=TRUE), sep="")#
	march.mania.df.list$tourney_results = merge(#
		march.mania.df.list$tourney_results, #
		march.mania.df.list$tourney_seeds, #
		by.x = c("season", "wteam"), #
		by.y = c("season", "team"),#
		all.x = TRUE)#
	colnames(march.mania.df.list$tourney_results)[grep("^seed",colnames(march.mania.df.list$tourney_results))] = paste(#
		"w", grep("^seed",colnames(march.mania.df.list$tourney_results), value=TRUE), sep="")#
#
	# stack all games together into one giant data.frame#
	march.mania.df.list$game_results = rbind_all(march.mania.df.list[c("regular_season_results","tourney_results")])#
	# replace blanks with NA's#
	repl.blank.with.na = function(col){#
		col[col==""] = NA#
		return(col)#
	}#
	str.to.fac = c("wseed.region","wseed.playin","lseed.region","lseed.playin","game.type")#
	march.mania.df.list$game_results[,str.to.fac[1:4]] = sapply(march.mania.df.list$game_results[,str.to.fac[1:4]], repl.blank.with.na)#
	# sapply can't be used here -- converts to character and nullifies the as.factor()#
	march.mania.df.list$game_results[,str.to.fac] = as.data.frame(lapply(march.mania.df.list$game_results[,str.to.fac], as.factor))#
	march.mania.df.list$game_results$wloc = factor(as.character(march.mania.df.list$game_results$wloc), #
		levels=c("H","A","N"), labels=c("Home","Away","Neutral"))#
#
	# label the teams with their names, but keep their IDs too#
	march.mania.df.list$game_results[,c("wteam.name","lteam.name")] = as.data.frame(lapply(march.mania.df.list$game_results[,c("wteam","lteam")],#
		factor, levels=march.mania.df.list$teams$team_id, labels=march.mania.df.list$teams$team_name))#
#
	# Create a unique game key for winning and losing teams by exploiting the fact that no teams ever played >1 game on a given date#
	march.mania.df.list$game_results$wteam.game.id = apply(march.mania.df.list$game_results[,c("season","daynum","wteam")], #
		1, paste, collapse="_")#
	march.mania.df.list$game_results$lteam.game.id = apply(march.mania.df.list$game_results[,c("season","daynum","lteam")], #
		1, paste, collapse="_")#
#
	# For predictions, we need to recode the teams into "team1" and "team2" rather than "winner" and "loser"#
	march.mania.df.list$game_results$team1 = apply(march.mania.df.list$game_results[,c("wteam","lteam")], 1, min)#
	march.mania.df.list$game_results$team2 = apply(march.mania.df.list$game_results[,c("wteam","lteam")], 1, max)#
	march.mania.df.list$game_results$game.id.matchup = apply(march.mania.df.list$game_results[,c("season","team1","team2")], #
	1, paste, collapse="_")#
	march.mania.df.list$game_results$game.id.unique = apply(march.mania.df.list$game_results[,c("season","daynum","team1","team2")], #
		1, paste, collapse="_")#
#
	# change [game day-dayzero] to correct dates#
	march.mania.df.list$game_results = merge(march.mania.df.list$game_results, march.mania.df.list$seasons[,c("season","dayzero")])#
	march.mania.df.list$game_results$dayzero = mdy(as.character(march.mania.df.list$game_results$dayzero))#
	march.mania.df.list$game_results$date = march.mania.df.list$game_results$dayzero + days(march.mania.df.list$game_results$daynum)#
#
	# new data frame of team results#
	# be sure not to name any columns above starting with "w" or "l" unless you really mean it!#
	# "loc" starts with "l" so process the "l" first#
	march.mania.df.list$winner_results = march.mania.df.list$game_results#
	colnames(march.mania.df.list$winner_results)[grep("^l", colnames(march.mania.df.list$winner_results))] = gsub("^l","opp.",colnames(march.mania.df.list$winner_results)[grep("^l", colnames(march.mania.df.list$winner_results))])#
	colnames(march.mania.df.list$winner_results)[grep("^w", colnames(march.mania.df.list$winner_results))] = gsub("^w","",colnames(march.mania.df.list$winner_results)[grep("^w", colnames(march.mania.df.list$winner_results))])#
	march.mania.df.list$winner_results$opp.loc = factor(as.character(march.mania.df.list$winner_results$loc), #
		levels=c("Home","Away","Neutral"), labels=c("Away","Home","Neutral"))#
	march.mania.df.list$winner_results$result = "Win"#
#
	march.mania.df.list$loser_results = march.mania.df.list$game_results#
	colnames(march.mania.df.list$loser_results)[grep("^l", colnames(march.mania.df.list$loser_results))] = gsub("^l","",colnames(march.mania.df.list$loser_results)[grep("^l", colnames(march.mania.df.list$loser_results))])#
	colnames(march.mania.df.list$loser_results)[grep("^w", colnames(march.mania.df.list$loser_results))] = gsub("^w","opp.",colnames(march.mania.df.list$loser_results)[grep("^w", colnames(march.mania.df.list$loser_results))])#
	march.mania.df.list$loser_results$loc = factor(as.character(march.mania.df.list$loser_results$opp.loc), #
		levels=c("Home","Away","Neutral"), labels=c("Away","Home","Neutral"))#
	march.mania.df.list$winner_results$result = "Loss"#
#
	march.mania.df.list$team_results = rbind_all(march.mania.df.list[c("winner_results","loser_results")])#
	march.mania.df.list$team_results$result = as.factor(march.mania.df.list$team_results$result)#
#
	ncaa.team.results = march.mania.df.list$team_results#
	ncaa.game.results = march.mania.df.list$game_results#
	tourney.slots = march.mania.df.list$tourney_slots#
	tourney.regions = march.mania.df.list$seasons[,-which(colnames(march.mania.df.list$seasons)=="dayzero")]#
#
	return(list(teams = ncaa.team.results, games = ncaa.game.results))#
}#
# fgm - field goals made#
# fga - field goals attempted#
# fgm3 - three pointers made#
# fga3 - three pointers attempted#
# ftm - free throws made#
# fta - free throws attempted#
# or - offensive rebounds#
# dr - defensive rebounds#
# ast - assists#
# to - turnovers#
# stl - steals#
# blk - blocks#
# pf - personal fouls#
# numot - overtime periods in the game#
# season - the year in which the *tournament* was played
ncaa.basketball = load.clean.ncaa("~/Dropbox/kaggle/marchmania2015/")
# this file assumes you've downloaded CSVs from #
# https://www.kaggle.com/c/march-machine-learning-mania-2015/data #
# and placed them on the provided path#
# (empty string should search current working directory)#
load.clean.ncaa = function(data.dir){#
	# ------------------------------------------------------------------------------#
	# load libraries:#
	# ------------------------------------------------------------------------------#
	pkgs.req = c("dplyr", "lubridate") # dplyr::rbind_all, lubridate::mdy#
	temp = sapply(pkgs.req, function(p) if(!require(p, character.only = TRUE)){#
		install.packages(p);library(p, character.only=TRUE)})#
#
	# ------------------------------------------------------------------------------#
	# load data:#
	# ------------------------------------------------------------------------------#
	# there may be other CSV files in this directory... let's specify the list manually rather than using list.files()#
	csvs.to.load = c("teams", "seasons", "regular_season_compact_results", "regular_season_detailed_results", #
		"tourney_compact_results", "tourney_detailed_results", "tourney_seeds", "tourney_slots")#
	# will convert strings to factors later. easier for merging if they stay strings for now.#
	march.mania.df.list = sapply(csvs.to.load, #
		function(fn) read.csv(paste(data.dir,fn,".csv",sep=""), stringsAsFactors=FALSE))#
#
	# ------------------------------------------------------------------------------#
	# clean/merge/summarize data:#
	# ------------------------------------------------------------------------------#
	# merge together the compact and detailed records for "regular season" games#
	march.mania.df.list$regular_season_results = merge(#
		march.mania.df.list$regular_season_compact_results, #
		march.mania.df.list$regular_season_detailed_results, #
		all = TRUE)#
	march.mania.df.list$regular_season_results$game.type = "Regular Season"#
#
	# merge together the compact and detailed records for NCAA tournament games#
	march.mania.df.list$tourney_results = merge(#
		march.mania.df.list$tourney_compact_results, #
		march.mania.df.list$tourney_detailed_results, #
		all = TRUE)#
	march.mania.df.list$tourney_results$game.type = "Tournament"#
#
	# parse the tournament seed information#
	# convert seed.region and seed.playin to factors later#
	march.mania.df.list$tourney_seeds$seed.region = substr(march.mania.df.list$tourney_seeds$seed, 1, 1)#
	march.mania.df.list$tourney_seeds$seed.playin = substr(march.mania.df.list$tourney_seeds$seed, 4, 4)#
	march.mania.df.list$tourney_seeds$seed = as.numeric(substr(march.mania.df.list$tourney_seeds$seed, 2, 3))#
#
	# merge the tournament seed info in with the tournament game info separately for winning and losing teams#
	march.mania.df.list$tourney_results = merge(#
		march.mania.df.list$tourney_results, #
		march.mania.df.list$tourney_seeds, #
		by.x = c("season", "lteam"), #
		by.y = c("season", "team"),#
		all.x = TRUE)#
	colnames(march.mania.df.list$tourney_results)[grep("^seed",colnames(march.mania.df.list$tourney_results))] = paste(#
		"l", grep("^seed",colnames(march.mania.df.list$tourney_results), value=TRUE), sep="")#
	march.mania.df.list$tourney_results = merge(#
		march.mania.df.list$tourney_results, #
		march.mania.df.list$tourney_seeds, #
		by.x = c("season", "wteam"), #
		by.y = c("season", "team"),#
		all.x = TRUE)#
	colnames(march.mania.df.list$tourney_results)[grep("^seed",colnames(march.mania.df.list$tourney_results))] = paste(#
		"w", grep("^seed",colnames(march.mania.df.list$tourney_results), value=TRUE), sep="")#
#
	# stack all games together into one giant data.frame#
	march.mania.df.list$game_results = rbind_all(march.mania.df.list[c("regular_season_results","tourney_results")])#
	# replace blanks with NA's#
	repl.blank.with.na = function(col){#
		col[col==""] = NA#
		return(col)#
	}#
	str.to.fac = c("wseed.region","wseed.playin","lseed.region","lseed.playin","game.type")#
	march.mania.df.list$game_results[,str.to.fac[1:4]] = sapply(march.mania.df.list$game_results[,str.to.fac[1:4]], repl.blank.with.na)#
	# sapply can't be used here -- converts to character and nullifies the as.factor()#
	march.mania.df.list$game_results[,str.to.fac] = as.data.frame(lapply(march.mania.df.list$game_results[,str.to.fac], as.factor))#
	march.mania.df.list$game_results$wloc = factor(as.character(march.mania.df.list$game_results$wloc), #
		levels=c("H","A","N"), labels=c("Home","Away","Neutral"))#
#
	# label the teams with their names, but keep their IDs too#
	march.mania.df.list$game_results[,c("wteam.name","lteam.name")] = as.data.frame(lapply(march.mania.df.list$game_results[,c("wteam","lteam")],#
		factor, levels=march.mania.df.list$teams$team_id, labels=march.mania.df.list$teams$team_name))#
#
	# Create a unique game key for winning and losing teams by exploiting the fact that no teams ever played >1 game on a given date#
	march.mania.df.list$game_results$wteam.game.id = apply(march.mania.df.list$game_results[,c("season","daynum","wteam")], #
		1, paste, collapse="_")#
	march.mania.df.list$game_results$lteam.game.id = apply(march.mania.df.list$game_results[,c("season","daynum","lteam")], #
		1, paste, collapse="_")#
#
	# For predictions, we need to recode the teams into "team1" and "team2" rather than "winner" and "loser"#
	march.mania.df.list$game_results$team1 = apply(march.mania.df.list$game_results[,c("wteam","lteam")], 1, min)#
	march.mania.df.list$game_results$team2 = apply(march.mania.df.list$game_results[,c("wteam","lteam")], 1, max)#
	march.mania.df.list$game_results$game.id.matchup = apply(march.mania.df.list$game_results[,c("season","team1","team2")], #
	1, paste, collapse="_")#
	march.mania.df.list$game_results$game.id.unique = apply(march.mania.df.list$game_results[,c("season","daynum","team1","team2")], #
		1, paste, collapse="_")#
	march.mania.df.list$game_results$team1.win = with(march.mania.df.list$game_results,as.numeric(team1==wteam))#
#
	# change [game day-dayzero] to correct dates#
	march.mania.df.list$game_results = merge(march.mania.df.list$game_results, march.mania.df.list$seasons[,c("season","dayzero")])#
	march.mania.df.list$game_results$dayzero = mdy(as.character(march.mania.df.list$game_results$dayzero))#
	march.mania.df.list$game_results$date = march.mania.df.list$game_results$dayzero + days(march.mania.df.list$game_results$daynum)#
#
	# new data frame of team results#
	# be sure not to name any columns above starting with "w" or "l" unless you really mean it!#
	# "loc" starts with "l" so process the "l" first#
	march.mania.df.list$winner_results = march.mania.df.list$game_results#
	colnames(march.mania.df.list$winner_results)[grep("^l", colnames(march.mania.df.list$winner_results))] = gsub("^l","opp.",colnames(march.mania.df.list$winner_results)[grep("^l", colnames(march.mania.df.list$winner_results))])#
	colnames(march.mania.df.list$winner_results)[grep("^w", colnames(march.mania.df.list$winner_results))] = gsub("^w","",colnames(march.mania.df.list$winner_results)[grep("^w", colnames(march.mania.df.list$winner_results))])#
	march.mania.df.list$winner_results$opp.loc = factor(as.character(march.mania.df.list$winner_results$loc), #
		levels=c("Home","Away","Neutral"), labels=c("Away","Home","Neutral"))#
	march.mania.df.list$winner_results$result = "Win"#
#
	march.mania.df.list$loser_results = march.mania.df.list$game_results#
	colnames(march.mania.df.list$loser_results)[grep("^l", colnames(march.mania.df.list$loser_results))] = gsub("^l","",colnames(march.mania.df.list$loser_results)[grep("^l", colnames(march.mania.df.list$loser_results))])#
	colnames(march.mania.df.list$loser_results)[grep("^w", colnames(march.mania.df.list$loser_results))] = gsub("^w","opp.",colnames(march.mania.df.list$loser_results)[grep("^w", colnames(march.mania.df.list$loser_results))])#
	march.mania.df.list$loser_results$loc = factor(as.character(march.mania.df.list$loser_results$opp.loc), #
		levels=c("Home","Away","Neutral"), labels=c("Away","Home","Neutral"))#
	march.mania.df.list$loser_results$result = "Loss"#
#
	march.mania.df.list$team_results = rbind_all(march.mania.df.list[c("winner_results","loser_results")])#
	march.mania.df.list$team_results$result = as.factor(march.mania.df.list$team_results$result)#
#
	ncaa.team.results = march.mania.df.list$team_results#
	ncaa.game.results = march.mania.df.list$game_results#
	tourney.slots = march.mania.df.list$tourney_slots#
	tourney.regions = march.mania.df.list$seasons[,-which(colnames(march.mania.df.list$seasons)=="dayzero")]#
#
	return(list(teams = ncaa.team.results, games = ncaa.game.results))#
}#
# fgm - field goals made#
# fga - field goals attempted#
# fgm3 - three pointers made#
# fga3 - three pointers attempted#
# ftm - free throws made#
# fta - free throws attempted#
# or - offensive rebounds#
# dr - defensive rebounds#
# ast - assists#
# to - turnovers#
# stl - steals#
# blk - blocks#
# pf - personal fouls#
# numot - overtime periods in the game#
# season - the year in which the *tournament* was played
ncaa.basketball = load.clean.ncaa("~/Dropbox/kaggle/marchmania2015/")
summary(ncaa.basketball[["teams"]])
summary(ncaa.basketball[["games"]])
ggplot(data=ncaa.basketball[["games"]], aes(x=lscore, y=wscore))+geom_point()
library(ggplot2)
ggplot(data=ncaa.basketball[["games"]], aes(x=lscore, y=wscore))+geom_point()
ggplot(data=subset(ncaa.basketball[["teams"]], team=="Duke"), aes(x=date, y=stl))+geom_line()
subset(ncaa.basketball[["teams"]], (team.name=="Duke")&(game.type=="Tournament"))
ggplot(data=subset(ncaa.basketball[["teams"]], (team.name=="Duke")&(game.type=="Tournament")), aes(x=season, y=seed))+geom_line()
?geom_bar
ggplot(data=ncaa.basketball[["games"]], aes(x=season, fill=numot))+geom_bar()
ggplot(data=subset(ncaa.basketball[["teams"]], (team.name=="Duke")), aes(x=season, fill=numot))+geom_bar()
ggplot(data=subset(ncaa.basketball[["teams"]], (team.name=="Duke")), aes(fill=season, y=numot))+geom_bar()
ggplot(data=subset(ncaa.basketball[["teams"]], (team.name=="Duke")), aes(x=numot))+geom_bar()
ggplot(data=subset(ncaa.basketball[["teams"]], (team.name=="Duke")), aes(x=numot, fill=season))+geom_bar()
ggplot(data=subset(ncaa.basketball[["teams"]], (team.name=="Duke")), aes(x=season, fill=stl))+geom_bar()
ggplot(data=subset(ncaa.basketball[["teams"]], (team.name=="Duke")), aes(fill=season, x=stl))+geom_bar()
ggplot(data=subset(ncaa.basketball[["teams"]], (team.name=="Duke")), aes(x=stl))+geom_bar()
?stat_bin
ggplot(data=subset(ncaa.basketball[["teams"]], (team.name=="Duke")), aes(x=season, fill=stl))+geom_bar(binwidth=1)
ggplot(data=subset(ncaa.basketball[["teams"]], (team.name=="Duke")), aes(x=stl))+geom_bar(binwidth=1)
summary(ncaa.basketball[["games"]]$date)
ggplot(data=subset(ncaa.basketball[["teams"]], (team.name=="Duke")), aes(x=stl)) +#
	geom_bar(binwidth=1) + #
	xlab("Number of steals per game") +#
	ggtitle("Performance of Duke's basketball team\n1984-85 season to 2013-14 season")
ggplot(data=subset(ncaa.basketball[["teams"]], (team.name=="Duke")), aes(x=stl)) +#
	geom_bar(binwidth=1) + #
	xlab("Number of steals per game") +#
	ylab("Count") +#
	ggtitle("Performance of Duke's basketball team\n1984-85 season to 2013-14 season")
grep("Cal",ncaa.basketball[["teams"]]$team.name)
ncaa.basketball[["teams"]][grep("Cal",ncaa.basketball[["teams"]]$team.name),"team.name"]
ggplot(data=subset(ncaa.basketball[["teams"]], (team.name=="California")), aes(x=stl)) +#
	geom_bar(binwidth=1) + #
	xlab("Number of steals per game") +#
	ylab("Count") +#
	ggtitle("Performance of Cal's basketball team\n1984-85 season to 2013-14 season")
ggplot(data=ncaa.basketball[["games"]], aes(x=season, y=wfta))+geom_boxplot()
ggplot(data=ncaa.basketball[["games"]], aes(x=as.factor(season), y=wfta)) +#
	geom_boxplot()
library(devtools)#
install_github("cboettig/knitcitations")
cleanbib()#
# Set pandoc as the default format:#
options("citation_format" = "pandoc")
citep("10.1007/0-387-28695-0")
library(knitcitations)
cleanbib()#
# Set pandoc as the default format:#
options("citation_format" = "pandoc")#
#
#Cite an article by DOI and the full citation information is gathered automatically. By default this now generates a citation in pandoc-flavored-markdown format. We use the inline command #
citep("10.1007/0-387-28695-0")
?citep
citep("grammar of graphics", year="2005")
citep("wickham ggplot2")
write.bibtex(file="references.bib")
getwd()
citep("10.1198/jcgs.2009.07098")
write.bibtex(file="references.bib")
? knitcitations
?citep
bibliography()
bib = read.bibtex("~/Dropbox/school/berkeley/general/Rdataviz/references.bib")
bib
names(bib)
ggplot(data=ncaa.basketball[["games"]], aes(x=lscore, y=wscore)) + #
	geom_point() + #
	xlab("Points scored by losing team") +#
	ylab("Points scored by winning team") +#
	ggtitle("Scores in NCAA basketball games\nNovember 1984 - April 2014")
? stat_bin2d
stat_bin2d
stat_binhex
ggplot(data=ncaa.basketball[["games"]], aes(x=lscore, y=wscore)) + #
	geom_hex(bins=c(40, 40)) + # default is c(30,30) or just 30 since no. of bins for x and y are same#
	xlab("Points scored by losing team") +#
	ylab("Points scored by winning team") +#
	ggtitle("Final scores of NCAA basketball games\nNovember 1984 - April 2014")
ggplot(data=ncaa.basketball[["games"]], aes(x=lscore, y=wscore)) + #
	stat_binhex(bins=c(80, 80)) + # default is c(30,30) or just 30 since no. of bins for x and y are same#
	xlab("Points scored by losing team") +#
	ylab("Points scored by winning team") +#
	ggtitle("Final scores of NCAA basketball games\nNovember 1984 - April 2014")
ggplot(data=ncaa.basketball[["games"]], aes(x=lscore, y=wscore)) + #
	stat_binhex(bins=c(60, 60)) + # default is c(30,30) or just 30 since no. of bins for x and y are same#
	xlab("Points scored by losing team") +#
	ylab("Points scored by winning team") +#
	ggtitle("Final scores of NCAA basketball games\nNovember 1984 - April 2014")
ggplot(data=ncaa.basketball[["games"]], aes(x=lscore, y=wscore)) + #
	geom_hex(stat = "binhex", bins=c(60, 60)) + # default is c(30,30) or just 30 since no. of bins for x and y are same#
	xlab("Points scored by losing team") +#
	ylab("Points scored by winning team") +#
	ggtitle("Final scores of NCAA basketball games\nNovember 1984 - April 2014")
ggplot(data=ncaa.basketball[["games"]], aes(x=lscore, y=wscore)) + #
	geom_hex(stat = "binhex", bins=c(60, 60)) + # default is c(30,30) or just 30 since no. of bins for x and y are same#
	xlab("Points scored by losing team") +#
	ylab("Points scored by winning team") +#
	ggtitle("Final scores of NCAA basketball games\nNovember 1984 - April 2014") + scale_fill_gradient("Count")
ggplot(data=ncaa.basketball[["games"]], aes(x=lscore, y=wscore)) + #
	geom_hex(stat = "binhex", bins=c(60, 60)) + # default is c(30,30) or just 30 since no. of bins for x and y are same#
	xlab("Points scored by losing team") +#
	ylab("Points scored by winning team") +#
	ggtitle("Final scores of NCAA basketball games\nNovember 1984 - April 2014") + scale_fill_continuous("Count")
scale_fill_gradient
scale_fill_continuous
install.packages("munsell")
library(munsell)
mnsl(c("2.5PB 2/4", "2.5PB 7/10")
mnsl(c("2.5PB 2/4", "2.5PB 7/10"))
install.packages("munsell")
setwd("~/Dropbox/school/berkeley/general/Rdataviz")
library(slidify)
slidify("~/Dropbox/school/berkeley/general/Rdataviz/index.Rmd")
slidify("~/Dropbox/school/berkeley/general/Rdataviz/index.Rmd")
browseURL("index.html")
slidify("~/Dropbox/school/berkeley/general/Rdataviz/index.Rmd")
browseURL("index.html")
slidify("~/Dropbox/school/berkeley/general/Rdataviz/index.Rmd")
browseURL("index.html")
slidify("~/Dropbox/school/berkeley/general/Rdataviz/index.Rmd")
browseURL("index.html")
ls()
plot(mc)
library(rCharts)
?rPlot
hair_eye_male <- subset(as.data.frame(HairEyeColor), Sex == "Male")#
n1 <- nPlot(Freq ~ Hair, group = "Eye", data = hair_eye_male, type = "multiBarChart")
str(n1)
n1$print("chart3")
n1$print("chart2")
nPlot
dat = expand.grid(x = 1:5, y = 1:5)#
dat = transform(dat, value = sample(1:5, 25, replace = T))#
p5 <- rPlot(x = 'bin(x, 1)', y = 'bin(y, 1)', color = 'value', data = dat, type = 'tile')#
p5
data(tips, package = 'reshape2')#
p3 <- rPlot(x = 'day', y = 'box(tip)', data = tips, type = 'box')#
p3
require(plyr)#
dat = count(mtcars, .(gear, am))#
p4 <- rPlot(x = 'bin(gear, 1)', y = 'freq', data = dat, type = 'bar', #
  list(var = 'am', type = 'wrap'))#
p4
library(dplyr)
a <- hPlot(Pulse ~ Height, data = MASS::survey, type = "bubble", title = "Zoom demo", subtitle = "bubble chart", size = "Age", group = "Exer")#
a$chart(zoomType = "xy")#
a$exporting(enabled = T)#
a
summary(subset(ncaa.basketball[["team.season.summ"]], season==2014))
ncaa.basketball[["team.season.summ"]]$tourney.invite = #
	with(ncaa.basketball[["team.season.summ"]], #
		factor(ifelse(is.na(tourney.seed), "No", "Yes"))
)
summary(subset(ncaa.basketball[["team.season.summ"]], season==2014))
hPlot
a <- hPlot(fg.pct.avg ~ mov.avg, data = subset(ncaa.basketball[["team.season.summ"]], season==2014), type = "bubble", title = "2013-14 NCAA Basketball Stats", subtitle = "bubble chart", size = "win.pct", group = "tourney.invite")#
a$chart(zoomType = "xy")#
a$exporting(enabled = T)#
a
a <- hPlot(fg.pct.avg ~ mov.avg, data = subset(ncaa.basketball[["team.season.summ"]], season==2014), type = "bubble", title = "2013-14 NCAA Basketball Stats", subtitle = "bubble chart", size = "win.pct", group = "tourney.invite", tooltip="team.name")#
a$chart(zoomType = "xy")#
a$exporting(enabled = T)#
a
a <- hPlot(fg.pct.avg ~ mov.avg, data = subset(ncaa.basketball[["team.season.summ"]], season==2014), type = "bubble", title = "2013-14 NCAA Basketball Stats", subtitle = "bubble chart", size = "win.pct", group = "tourney.invite", tooltip = "#! function(item){ #
                 return item.team.name} #
                 !#")#
a$chart(zoomType = "xy")#
a$exporting(enabled = T)#
a
a <- hPlot(fg.pct.avg ~ mov.avg, data = subset(ncaa.basketball[["team.season.summ"]], season==2014), type = "bubble", title = "2013-14 NCAA Basketball Stats", subtitle = "bubble chart", size = "win.pct", group = "tourney.invite", tooltip = "function(item){ #
                 return item.team.name}")
a
install.packages("Lahman")
require(rCharts)#
p1 <- rPlot(SOG ~ yearID, data = team_data, type = 'point', #
  size = list(const = 2), color = list(const = '#888'), #
  tooltip="function(item){return item.SOG +'\n' + item.name + '\n' + item.yearID}"#
)#
p1$print('chart1')
p1
require(Lahman)  #
require(plyr)#
dat = Teams[,c('yearID', 'name', 'G', 'SO')]#
team_data = na.omit(transform(dat, SOG = round(SO/G, 2)))#
league_data = ddply(team_data, .(yearID), summarize, SOG = mean(SOG))
p1 <- rPlot(SOG ~ yearID, data = team_data, type = 'point', #
  size = list(const = 2), color = list(const = '#888'), #
  tooltip="function(item){return item.SOG +'\n' + item.name + '\n' + item.yearID}"#
)#
p1$print('chart1')
p1 <- rPlot(SOG ~ yearID, data = team_data, type = 'point', #
  size = list(const = 2), color = list(const = '#888'), #
  tooltip="function(item){return item.SOG +'\n' + item.name + '\n' + item.yearID}"#
)#
p1
head(team_data)
slidify("~/Dropbox/school/berkeley/general/Rdataviz/index.Rmd")
slidify("~/Dropbox/school/berkeley/general/Rdataviz/index.Rmd")
browseURL("index.html")
colnames(ncaa.basketball[["team.season.summ"]])
ls()
library(dplyr)#
ncaa.basketball[["team.regseason.summ"]] = #
	subset(ncaa.basketball[["teams"]], #
		game.type=="Regular Season") %>% #
	group_by(team.name,season) %>% #
	summarise(win.pct = mean(result=="Win"),#
		points.avg = mean(score),#
		mov.avg = mean(score-opp.score), # margin of victory#
		fg.pct.avg = mean(fgm/fga),      # field goals#
		fg3.pct.avg = mean(fgm3/fga3),   # three pointers#
		ft.pct.avg = mean(ftm/fta),      # free throws#
		rebound.avg = mean(or+dr))#
#
ncaa.basketball[["team.season.seed"]] = #
	subset(ncaa.basketball[["teams"]], game.type=="Tournament") %>%#
	group_by(team.name,season) %>% #
	summarise(tourney.seed = unique(seed))#
#
ncaa.basketball[["team.season.summ"]] = left_join(#
	ncaa.basketball[["team.regseason.summ"]],#
	ncaa.basketball[["team.season.seed"]], #
	by = c("team.name","season"))
head(ncaa.basketball[["team.season.seed"]])
